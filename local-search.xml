<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>铃芽之旅</title>
    <link href="/posts/457e8b6b.html"/>
    <url>/posts/457e8b6b.html</url>
    
    <content type="html"><![CDATA[<h1 id="今天看了："><a href="#今天看了：" class="headerlink" title="今天看了："></a>今天看了：</h1><div class="douban-card-block">    <a class="douban-card" href="https://movie.douban.com/subject/35371261">        <div bg-lazy class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2887641712.jpg');"></div>        <div class="douban-card-left">            <div bg-lazy class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2887641712.jpg');"></div>            <div class="douban-card-status">灯影绰约</div>        </div>        <div class="douban-card-right">            <div class="douban-card-item"><span>电影名: </span><strong>铃芽之旅すずめの戸締まり(2022)</strong></div>            <div class="douban-card-item"><span>导演: </span><span>新海诚</span></div>            <div class="douban-card-item"><span>主演: </span><span>原菜乃华/松村北斗</span></div>            <div class="douban-card-item"><span>上映时间: </span><span>2023-03-24(中国大陆)</span></div>            <div class="douban-card-item"><span>评分: </span><span>7.6</span></div>        </div>    </a></div>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型与原型链</title>
    <link href="/posts/e8f85541.html"/>
    <url>/posts/e8f85541.html</url>
    
    <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>类 -&gt; 把数据的公共部分抽离出来形成一个模版</p><p><code>prototype</code> （显示原型）是函数才有的属性，这个属性指向一个对象，该对象正是调用该构造函数而创建的实例的原型。<strong>指向原型对象</strong>。<strong>箭头函数是没有 prototype 属性的</strong>。在最新 ES 规范里，prototype 被定义为：给其它对象<strong>提供共享属性的对象</strong>。<code>prototype</code> 自己也是对象，只是被用以承担某个职能罢了。<code>prototype</code> 描述的是两个对象之间的某种（委托）关系（其中一个，为另一个提供属性访问权限）。每个函数都有一个<code> prototype</code> 属性，它默认指向一个 Object 空对象(即称为:原型对象)。<br>每一个 JavaScript 对象( <code>null</code> 除外)都有一个属性，叫 <code>__proto__</code>(隐式原型) ,这个属性<strong>指向该对象的原型</strong>。指向原型对象, 原型对象其实就是通过 Object 构造函数生成的。它是历史遗留，在某些环境中，比如 Deno，它是不被支持的。所有函数的 <code>__proto__</code> 指向他们的原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//学生公共信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">sex,name,major</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span>=sex;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">major</span>=major;<br>&#125;<br><span class="hljs-title function_">skill</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;学习&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">major</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> student = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;CS&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/22/3U7i1Ztz2fpv4gm.png" alt="image-20230322155459138"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>原型链-&gt;模拟类-&gt;实现了面向对象编程思路，从而实现类继承<br>理解原型链：</p><ol><li>理解new关键字的作用机制 写</li><li>理解[[GET]] 读<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//new 普通函数对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>&#125;<br><span class="hljs-comment">//1.执行前 2.执行</span><br><span class="hljs-comment">// new 的流程</span><br><span class="hljs-comment">// 执行前：</span><br><span class="hljs-comment">// 1.绑定this为空对象</span><br><span class="hljs-comment">// 2.让空对象的[[Prototype]](__proto__)-&gt;函数的prototype属性 =&gt; this.__prototype=foo.prototype</span><br><span class="hljs-comment">// 3.正常执行函数</span><br><span class="hljs-comment">// 4.如果函数返回的是基本类型，就返回this的值，否则返回原函数的返回值</span><br><span class="hljs-comment">// (1).所有对象都有隐式属性[[Prototype]](__proto__),所有的对象本身都是new出来的</span><br><span class="hljs-comment">// (2).所有的函数对象-&gt; prototype 显式属性</span><br>foo.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title function_">foo</span>() <span class="hljs-comment">//构造函数</span><br><span class="hljs-comment">//Object.prototype.__proto__=null 原型链的终点</span><br><span class="hljs-comment">//Function.prototype.__proto__=Object.protype</span><br><span class="hljs-comment">//Object.__proto__=Function.prototype</span><br><span class="hljs-comment">//Function.__proto__=Function.prototype</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>js本身不是传统意义上的面向对象语言<br>如何得到没有任何属性的对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lhs和rhs</title>
    <link href="/posts/fb4d9d73.html"/>
    <url>/posts/fb4d9d73.html</url>
    
    <content type="html"><![CDATA[<h2 id="RHS"><a href="#RHS" class="headerlink" title="RHS"></a><code>RHS</code></h2><p><code>RHS</code>  找到变量，对其赋值。</p><p>如果<code>RHS</code>查找失败，JavaScript会抛出一个“ReferenceError”错误。</p><h2 id="LHS"><a href="#LHS" class="headerlink" title="LHS"></a><code>LHS</code></h2><p><code>LHS</code>  取得某变量的值。</p><p>在JavaScript中，<code>LHS</code>（左侧查询）发生在变量被赋值时。当变量在赋值操作符的左侧出现时，JavaScript引擎会尝试查找该变量。如果变量已经存在于当前作用域中，则该变量将被用于赋值操作。如果变量不存在，则会创建一个新变量，并用于赋值操作。 如果在当前作用域中找不到该变量，则JavaScript引擎会一级一级地向上查找，直到找到全局作用域为止。如果在全局作用域中仍然找不到该变量，则会创建一个新的全局变量。</p><p>如果LHS查找失败，JavaScript会自动创建一个全局变量（非“严格模式”下）或抛出一个“ReferenceError”错误（“严格模式”下）。</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thisthis</title>
    <link href="/posts/bb42db37.html"/>
    <url>/posts/bb42db37.html</url>
    
    <content type="html"><![CDATA[<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><blockquote><p>在 JavaScript 中，关键字 this 表示当前执行上下文中的对象。换句话说，this 引用的是当前正在执行代码的对象。具体来说，this 的值取决于函数是如何被调用的。在全局作用域中使用 this 会返回全局对象（浏览器中为 window，Node.js 中为 global），在函数中使用 this 则取决于函数的调用方式。                                                                                                                                        –chatgpt老师</p></blockquote><h2 id="方法中的this"><a href="#方法中的this" class="headerlink" title="方法中的this"></a>方法中的this</h2><p>为什么需要<code>this</code>，<code>user</code>被销毁，使用<code>user.name</code>    肯定会报错</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>  <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>( user.<span class="hljs-property">name</span> ); <span class="hljs-comment">// 导致错误 this.name不会报错</span><br>  &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> admin = user;<br>user = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 重写让其更明显</span><br>admin.<span class="hljs-title function_">sayHi</span>(); <span class="hljs-comment">// TypeError: Cannot read property &#x27;name&#x27; of null</span><br></code></pre></div></td></tr></table></figure><h2 id="this不受限制"><a href="#this不受限制" class="headerlink" title="this不受限制"></a>this不受限制</h2><p>在 JavaScript 中，<code>this</code> 关键字与其他大多数编程语言中的不同。JavaScript 中的 <code>this</code> 可以用于任何函数，即使它不是对象的方法。<br><code>this</code> 的值是在代码运行时计算出来的，它取决于代码上下文。</p><ul><li><p>严格模式下的 <code>this</code> 值为 <code>undefined</code></p></li><li><p>在非严格模式的情况下，<code>this</code> 将会是全局对象</p></li></ul><h2 id="箭头函数没有自己的this"><a href="#箭头函数没有自己的this" class="headerlink" title="箭头函数没有自己的this"></a>箭头函数没有自己的<code>this</code></h2><p>  当我们并不想要一个独立的 <code>this</code>，反而想从外部上下文中获取时，它很有用。</p><h2 id="this的绑定"><a href="#this的绑定" class="headerlink" title="this的绑定"></a><code>this</code>的绑定</h2><ul><li><p>  默认绑定 非严格模式绑定<code>window</code>对象</p></li><li><p>  隐式绑定 与上下文执行环境有关</p></li><li><p>  显示绑定 <code>call bind apply</code> 的第一个参数都可以是函数内<code>this</code>指向的对象</p></li><li><p>  new 绑定 使用构造函数<code>new</code>的一个新的实例对象时，当前构造函数的<code>this</code>会指向新的实例对象</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用关键帧@keyframes制作一个炫酷的css动画</title>
    <link href="/posts/fa328b73.html"/>
    <url>/posts/fa328b73.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝与深拷贝</title>
    <link href="/posts/2ba55f9f.html"/>
    <url>/posts/2ba55f9f.html</url>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h1><h2 id="原始类型的复制"><a href="#原始类型的复制" class="headerlink" title="原始类型的复制"></a>原始类型的复制</h2><p>将 <code>message</code> 复制到 <code>phrase</code>，这样<code>message</code> 和<code>phrase</code>就是两个独立的变量，互不干扰。原始类型是存在内存的栈里。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> message = <span class="hljs-string">&quot;Hello!&quot;</span>;<br><span class="hljs-keyword">let</span> phrase = message;<br></code></pre></div></td></tr></table></figure><h2 id="对象的复制引用"><a href="#对象的复制引用" class="headerlink" title="对象的复制引用"></a>对象的复制引用</h2><p>看一段代码，显然<code>a</code>和<code>b</code>都指向同一块内存地址</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-keyword">let</span> b = a; <span class="hljs-comment">// 复制引用</span><br><br><span class="hljs-title function_">alert</span>( a == b ); <span class="hljs-comment">// true，都引用同一对象</span><br><span class="hljs-title function_">alert</span>( a === b ); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h2 id="对象的浅拷贝"><a href="#对象的浅拷贝" class="headerlink" title="对象的浅拷贝"></a>对象的浅拷贝</h2><p>遍历一维对象（我自己取的名字）的所有属性，搬运到新建的空对象上，但是如果对象里面嵌套了对象，这一招就不管用了。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> clone = &#123;&#125;; <span class="hljs-comment">// 新的空对象</span><br><br><span class="hljs-comment">// 将 user 中所有的属性拷贝到其中</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;<br>  clone[key] = user[key];<br>&#125;<br><br><span class="hljs-comment">// 现在 clone 是带有相同内容的完全独立的对象</span><br>clone.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Pete&quot;</span>; <span class="hljs-comment">// 改变了其中的数据</span><br><br><span class="hljs-title function_">alert</span>( user.<span class="hljs-property">name</span> ); <span class="hljs-comment">// 原来的对象中的 name 属性依然是 John</span><br><br></code></pre></div></td></tr></table></figure><p>javascript还提供了<code>Object.assign</code>这个方法。使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span> &#125;;<br><br><span class="hljs-keyword">let</span> permissions1 = &#123; <span class="hljs-attr">canView</span>: <span class="hljs-literal">true</span> &#125;;<br><span class="hljs-keyword">let</span> permissions2 = &#123; <span class="hljs-attr">canEdit</span>: <span class="hljs-literal">true</span> &#125;;<br><br><span class="hljs-comment">// 将 permissions1 和 permissions2 中的所有属性都拷贝到 user 中</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(user, permissions1, permissions2);<br><br><span class="hljs-comment">// 现在 user = &#123; name: &quot;John&quot;, canView: true, canEdit: true &#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="对象的深拷贝"><a href="#对象的深拷贝" class="headerlink" title="对象的深拷贝"></a>对象的深拷贝</h2><p>可以使用递归的方式实现深层拷贝</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">sizes</span>: &#123;<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">182</span>,<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">50</span><br>  &#125;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>)&#123;<br>  <span class="hljs-keyword">let</span> newObj=&#123;&#125;;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj)&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj[key]===<span class="hljs-string">&#x27;Object&#x27;</span>&amp;&amp; obj[key]!==<span class="hljs-literal">null</span>)&#123;<br>    newObj[key]=<span class="hljs-title function_">deepClone</span>(obj[key]);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    newObj[key]=obj[key];<br>  &#125;<br> &#125;<br>  <span class="hljs-keyword">return</span> newObj;<br>&#125;<br><span class="hljs-title function_">deepClone</span>(user);<br></code></pre></div></td></tr></table></figure><p>很蓝很蓝啦～～</p><p>还可以使用loadsh库的_.cloneDeep(obj)</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode之Vim使用指北</title>
    <link href="/posts/76d7679d.html"/>
    <url>/posts/76d7679d.html</url>
    
    <content type="html"><![CDATA[<ul><li><p>   dw从光标当前的位置开始删除，直到删到单词最后</p></li><li><p>   daw，算是1的属性扩充版，这个命令可以直接删除光标所在的一个单词。为了方便记忆，可以记忆为delete a word缩写</p></li><li><p>   bdw，这也是一个复合命令。B可以让光标回退到单词开头的位置，而dw则是第1个描述过的命令</p></li><li><p>   另外再有就是删除一个字符，操作为x ,X</p></li><li><p>   单词字首间前后文本移动：b e</p></li><li><p>   同一个单词字字尾移动：b w</p></li><li><p>   删除当前行并进入编辑模式：cc</p></li><li><p>   gb : 移动到下一个单词, 跟当前光标所在的单词一样</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次难忘的重装系统经历</title>
    <link href="/posts/f8e05735.html"/>
    <url>/posts/f8e05735.html</url>
    
    <content type="html"><![CDATA[<h2 id="记一次难忘的重装系统经历"><a href="#记一次难忘的重装系统经历" class="headerlink" title="记一次难忘的重装系统经历"></a>记一次难忘的重装系统经历</h2><p>由于自己的手残在解除 sip 的情况下，输入了<code>sudo rm -rf /Library</code>,结果就有了下面这张表==</p><p><img src="https://s2.loli.net/2022/07/14/kEtTi8aBZHeguSL.jpg" alt="760A3485-8A9C-4B2F-BF97-D74A28F7794E_1_102_o"></p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git入门</title>
    <link href="/posts/c8c37a7.html"/>
    <url>/posts/c8c37a7.html</url>
    
    <content type="html"><![CDATA[<h1 id="git-是个好东西"><a href="#git-是个好东西" class="headerlink" title="git 是个好东西"></a>git 是个好东西</h1><h2 id="关键词：后悔药"><a href="#关键词：后悔药" class="headerlink" title="关键词：后悔药"></a>关键词：后悔药</h2><h2 id="几行英文"><a href="#几行英文" class="headerlink" title="几行英文"></a>几行英文</h2><ul><li>1.On branch master</li><li>2.No commits yet</li><li>3.Untracked files</li></ul><h2 id="几行命令"><a href="#几行命令" class="headerlink" title="几行命令"></a>几行命令</h2><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git init<br>git status<br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span><br>git <span class="hljs-keyword">log</span> -p<br>git <span class="hljs-keyword">log</span> <span class="hljs-comment">--oneline</span><br>git <span class="hljs-keyword">log</span> <span class="hljs-comment">--oneline --graph --all</span><br>git checkout -/+<br></code></pre></div></td></tr></table></figure><h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><ul><li>modified 修改</li><li>staged 暂存</li><li>committed 提交</li></ul><h2 id="tag-标签"><a href="#tag-标签" class="headerlink" title="tag 标签"></a>tag 标签</h2><p>大的版本打个标签<br><code>git tag -a</code></p><h2 id="分支-branch"><a href="#分支-branch" class="headerlink" title="分支 branch"></a>分支 branch</h2><p>同一个时间点允许存在多条线</p><h2 id="第二条分支"><a href="#第二条分支" class="headerlink" title="第二条分支"></a>第二条分支</h2><p>…</p><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p><code>git merge</code><br>123456789</p><p>fix</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><code>git remote add git-learn https://github.com/Seannnnnnnion/git-learn.git</code><br><code>git push -u git-learn master</code><br><code>git clone xxx</code><br><code>git fetch</code></p><p>gitcheatsheet<br><a href="https://biaoyansu.com/27.cheatsheet">https://biaoyansu.com/27.cheatsheet</a></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式入门</title>
    <link href="/posts/a89d29ca.html"/>
    <url>/posts/a89d29ca.html</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>. 匹配除断行外任意一个字符</li><li>\ 转义字符</li><li>\w 匹配阿拉伯数字、英文大小写字母和下划线</li><li>\W 匹配被\w 排除在外的字符（\w 的补集）</li><li>\d 匹配阿拉伯数字</li><li>\D 匹配非阿拉伯数字（\d 的补集）</li><li>\s 匹配空白字符：空格、制表符、断行等</li><li>\S 匹配被\s 排除在外的字符（s 的补集）</li><li>[选择范围] 匹配括号中的任意一个字符</li><li>[范围]+ 重复一次或者多次</li><li>[范围]* 重复 0 次或者多次</li><li>[范围]？匹配 0 个或一个</li><li>{} 指定次数范围</li><li>(?:模式) 匹配分组但是不捕获</li><li>(?=模式) 正向肯定预查</li><li>(?!模式) 正向否定预查</li><li>(?&lt;=模式&gt;) 反向肯定预查</li><li>(?&lt;!模式&gt;) 反向否定预查</li></ul><p>cheatsheet:<a href="https://biaoyansu.com/28.cheatsheet">https://biaoyansu.com/28.cheatsheet</a></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac快捷键for_RKG68</title>
    <link href="/posts/40a32419.html"/>
    <url>/posts/40a32419.html</url>
    
    <content type="html"><![CDATA[<h1 id="mac-快捷键-for-RK-G68"><a href="#mac-快捷键-for-RK-G68" class="headerlink" title="mac 快捷键 for RK G68"></a>mac 快捷键 for RK G68</h1><ul><li>WIN + C /V 复制粘贴</li><li>ALT + L 启动台</li><li>CTRL + -〉/〈-切换桌面</li><li>WIN + TAB 切换应用</li><li>RIGHT SHIFT 桌面</li><li>WIN+CTRL+SPACE 打开 emoj 输入框</li><li>WIN + L 定位到浏览器地址栏</li><li>CTRL + TAB 切换标签页</li><li>WIN + -&gt;/&lt;-快速定位到文末/开头</li><li>WIN + ALT + SPACE 快速打开访达</li></ul>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新玩具RKG68</title>
    <link href="/posts/94a8d0cb.html"/>
    <url>/posts/94a8d0cb.html</url>
    
    <content type="html"><![CDATA[<h1 id="新玩具-RKG68"><a href="#新玩具-RKG68" class="headerlink" title="新玩具 RKG68"></a>新玩具 RKG68</h1><blockquote><p>要知道，键盘之于男生就像口红之于女士，我们很难得到一块完全满足自己期待的键盘。</p></blockquote><p>放假前刚好遇上年货节，于是想给自己买一副机械键盘，想着不要太大，基本的功能键在就行（主要为了 coding），这也是我第二次买机械键盘了。于是列出了以下标准：</p><ol><li>68 键，尽量小巧</li><li>价格控制在 300 元左右（问就是穷）</li><li>有背光灯更好</li><li>好看，颜值即正义</li><li>轴体选择，被称为万精油的茶轴</li></ol><p>经过精心挑选，我选择了 RKG68 大炭茶轴这款键盘，符合以上的要求。虽然中间一波三折，今天终于到了。购入价格 278-20，20 为背部有瑕疵找客服协商补偿的，中间还经历了一次换货 🤐</p><p><img src="https://s2.loli.net/2022/01/19/MEXTQGI5jq7RuwD.png" alt="image-20220119185328640"></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>键盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年终总结</title>
    <link href="/posts/a23e5172.html"/>
    <url>/posts/a23e5172.html</url>
    
    <content type="html"><![CDATA[<h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1><h2 id="关于-blog"><a href="#关于-blog" class="headerlink" title="关于 blog"></a>关于 blog</h2><p>2021 年 5 月 1 号，我是学着网上的方法自己一步一步搭建了这个博客，来记录自己的生活，还有一些学习心得。</p><p><code>Hexo+Pico+Typora</code></p><h2 id="今年我开了几个会员："><a href="#今年我开了几个会员：" class="headerlink" title="今年我开了几个会员："></a>今年我开了几个会员：</h2><ol><li>flomo 年度会员-58💰</li><li>淘宝 88vip-88💰</li><li>赠送的网易云黑胶年度会员-free</li><li>一直续费的 apple music 会员-5💰 一个月</li></ol><h2 id="读的书-📖"><a href="#读的书-📖" class="headerlink" title="读的书 📖"></a>读的书 📖</h2><ul><li><p>《三体》(年度最佳！)</p></li><li><p>《被讨厌的勇气》</p></li><li><p>《夏日烟火和我的尸体》</p></li><li><p>《今日简史》</p></li><li><p>《睡眠革命》</p></li></ul><h2 id="看过的电影-🎬"><a href="#看过的电影-🎬" class="headerlink" title="看过的电影 🎬"></a>看过的电影 🎬</h2><ul><li>《沙丘》(2021 国内院线最佳科幻片！)</li><li>《爱情神话》(2021 看的最后一部电影，年度最佳爱情片！)</li><li>《爱在黎明破晓之前》</li><li>《哈尔的移动城堡》</li><li>《熔炉》</li><li>《82 年生的金智英》</li><li>《绿皮书》</li><li>《扬名立万》</li><li>《鱿鱼游戏》</li><li>《摩登情爱》1-2</li><li>《饮食男女》</li><li>《小谢尔顿》1-4</li><li>《情书》</li><li>《请以你的名字呼唤我》</li><li>《心灵捕手》</li><li>《误杀》1-2</li><li>《爱死机》2</li><li>《到了三十岁还是处男，似乎会变成魔法师》</li><li>《旺达幻视》</li><li>《洛基》</li><li>《长津湖》</li><li>《鬼灭之刃无限列车》</li></ul><h2 id="听的一些音乐-🎵"><a href="#听的一些音乐-🎵" class="headerlink" title="听的一些音乐 🎵"></a>听的一些音乐 🎵</h2><p>2021 遇到的一些音乐人带给我美妙的节奏</p><ul><li>告五人洒脱</li><li>柳爽洒脱</li><li>灵魂沙发治愈</li><li>YOASOBI 日语流行</li><li>橘子海治愈</li><li>乐童音乐家治愈</li><li>林家谦粤语新星</li></ul><h2 id="一些经历"><a href="#一些经历" class="headerlink" title="一些经历"></a>一些经历</h2><p>八月到十月实习过一段时间见 <a href="https://seannnnnnnion.github.io/undefined/undefined/undefined/2021-shu-jia/">2021 暑假 - Sean’s blog (seannnnnnnion.github.io)</a></p><p>2021 年也交到了一些新朋友，庆幸！</p><p>去方特坐了人生第一次跳楼机，刺激～</p><p>2021 年 12 月 12 日我下单了人生第一台 MacBook Air (这应该是这一年我下单最值的东西，生产力翻倍！😝)，这篇博客就是在这台电脑写的第一篇 blog。</p><h2 id="关于自我认知"><a href="#关于自我认知" class="headerlink" title="关于自我认知"></a>关于自我认知</h2><p>经过一年被生活的敲打，明显感觉自己各方面的不足。不够自信，做事摇摆不定 (随大众)，不知道自己想要的是什么，计算机科学基础知识匮乏……</p><p>人活一世，总得活出自己的样子。嗯嗯嗯嗯。</p><img src="https://s2.loli.net/2022/01/02/V4fdXrvbJyZBxez.png" alt="image-20220102145026381" style="zoom:50%;" /><h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><p>接下来的一年，期待自己的成长，找到属于自己的笃定、自信！多读书，多去经历，多去尝试，总能学到点什么。明白自己想要的，努力去争取，不摆烂！！！</p><p>还有，blog 记得更新！</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今天老子终于辞职了</title>
    <link href="/posts/78b5d5bc.html"/>
    <url>/posts/78b5d5bc.html</url>
    
    <content type="html"><![CDATA[<p><strong>为期三个月的实习生活终于结束了</strong></p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="/posts/4a3d459a.html"/>
    <url>/posts/4a3d459a.html</url>
    
    <content type="html"><![CDATA[<h1 id="docker-学习笔记"><a href="#docker-学习笔记" class="headerlink" title="docker 学习笔记"></a>docker 学习笔记</h1><h2 id="0x01-移除旧版本-docker-如果有"><a href="#0x01-移除旧版本-docker-如果有" class="headerlink" title="0x01 移除旧版本 docker(如果有)"></a>0x01 移除旧版本 docker(如果有)</h2><p><code>[root@localhost sean]# yum remove docker docker-common docker-selinux docker-engine</code></p><h2 id="0x02-安装依赖包"><a href="#0x02-安装依赖包" class="headerlink" title="0x02 安装依赖包"></a>0x02 安装依赖包</h2><p><code>[root@localhost sean]# yum install -y yum-utils device-mapper-persistent-data lvm2</code></p><h2 id="0x03-换源"><a href="#0x03-换源" class="headerlink" title="0x03 换源"></a>0x03 换源</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[root@localhost sean]<span class="hljs-comment"># yum-config-manager \</span><br>&gt;     --add-repo \<br>&gt;     https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br><br></code></pre></div></td></tr></table></figure><h2 id="0x04-安装指定版本-docker"><a href="#0x04-安装指定版本-docker" class="headerlink" title="0x04 安装指定版本 docker"></a>0x04 安装指定版本 docker</h2><p><code>[root@localhost sean]# yum install docker-ce-19.03.13 docker-ce-cli-19.03.13 containerd.io -y</code></p><h2 id="0x05-开启开机自启动，启动-docker"><a href="#0x05-开启开机自启动，启动-docker" class="headerlink" title="0x05 开启开机自启动，启动 docker"></a>0x05 开启开机自启动，启动 docker</h2><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># systemctl daemon-reload</span><br>[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># systemctl restart docker</span><br></code></pre></div></td></tr></table></figure><h2 id="0x06-查看-docker-信息"><a href="#0x06-查看-docker-信息" class="headerlink" title="0x06 查看 docker 信息"></a>0x06 查看 docker 信息</h2><p><code>[root@localhost sean]# docker info</code></p><h2 id="0x07-添加镜像加速"><a href="#0x07-添加镜像加速" class="headerlink" title="0x07 添加镜像加速"></a>0x07 添加镜像加速</h2><p><code>[root@localhost sean]# vi /etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># systemctl daemon-reload</span><br>[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># systemctl restart docker</span><br>[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># docker version</span><br></code></pre></div></td></tr></table></figure><p>启动服务</p><p>查看版本信息</p><p><img src="https://i.loli.net/2021/08/03/8jDseCiVx4fkAYL.png" alt="image-20210803101526284"></p><h2 id="0x08-docker-hellloworld"><a href="#0x08-docker-hellloworld" class="headerlink" title="0x08 docker hellloworld"></a>0x08 docker hellloworld</h2><h4 id="拉取-hello-world-镜像"><a href="#拉取-hello-world-镜像" class="headerlink" title="拉取 hello-world 镜像"></a>拉取 hello-world 镜像</h4><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># docker pull hello-world</span><br></code></pre></div></td></tr></table></figure><h4 id="运行-hello-world"><a href="#运行-hello-world" class="headerlink" title="运行 hello-world"></a>运行 hello-world</h4><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> sean]<span class="hljs-meta"># docker run hello-world</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/03/VNmAH2hMsYdi97B.png" alt="image-20210803101612932"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021暑假</title>
    <link href="/posts/c87bec6a.html"/>
    <url>/posts/c87bec6a.html</url>
    
    <content type="html"><![CDATA[<h1 id="2021-年暑假"><a href="#2021-年暑假" class="headerlink" title="2021 年暑假"></a>2021 年暑假</h1><h2 id="0x00、对过去的一年的总结"><a href="#0x00、对过去的一年的总结" class="headerlink" title="0x00、对过去的一年的总结"></a>0x00、对过去的一年的总结</h2><p>不知不觉，研究生一年级一年的时光匆匆而过，从收到这个学校的拟录取时的喜悦，到后来慢慢对这个学校的了解时的失落都化作一张机票，2020 年的 9 月 12 号，我拖着一大堆行李从在良庆区的叔叔家来到这个陌生的南方学校。抱着<code>既来之，则安之</code>的态度，在这里开始自己研究生三年的学习；抱着自己那时所谓科研的一些热情，开始在自己选择的领域耕耘。</p><p>一些失望：</p><ul><li><p>学校的管理制度太不科学，研究生的权利没有得到落实（吐血）</p></li><li><p>电子信息学院的管理制度更是奇葩，招生 160 余人，开学直接划分为一个班级，管理难度可想而知。重要通知从来都是临时通知，就连选导师这个事情都能拖到十月份，研究生学习没有专门的实验室，等到建成并投入使用都是下个学期的事了。一些选了人工智能学院导师的学生更是连个所谓的学习得地方都没有。</p></li><li><p>还有之一想吐槽的就是学费加上住宿得有 1.4w 了==</p></li></ul><p>这一年里似乎自己没干什么事情，由于选了一个摸鱼导师，身边大部分人对自己的未来都比价迷茫，自己对学术也不是逼的很紧，上学期偶尔会去图书馆学习，在自己的努力学习之下（bushi），终于在 2020 下半年过了六级。2020 年寒假不自量力地去报名了教师资格证书考试后连挂三门再加上自己下学期做了一个月的晚班老师，深深地感叹自己不是做老师的料子。</p><h2 id="0x01、2021-年暑假"><a href="#0x01、2021-年暑假" class="headerlink" title="0x01、2021 年暑假"></a>0x01、2021 年暑假</h2><p>这是我人生倒数第二个暑假了，7.10 号随着最后一门考试的结束开始了为时两个月左右的暑假，我也申请了留校。暑假的前一个月，自己有在边找实习边学习前端的知识，面试了几家公司后均以失败告终（菜是原罪=.=），我梳理了学习路线图准备从头开始学习。</p><p><img src="https://i.loli.net/2021/08/14/oVmLjksMUdAuKtD.png" alt="前端学习路线"></p><p>八月，卢老师在群里发了一个润建股份招聘暑期兼职的消息，只要是计算机专业的都可以去，于是我就去尝试一下。</p><p>tmd 结果加了半个月的班:(，八月的跑步计划也被搁置，朋友说这张图很明显看出来那些日子在加班……</p><img src="https://i.loli.net/2021/08/31/5YIer3MTQKjPAJf.jpg" alt="3FCD3FC8-26EC-4118-8737-9DCAE3EB2745" style="zoom:80%;" /><p>八月看完了《小谢尔顿第三季》和《摩登情爱 2》,一个给我带来欢乐，一个给我带来浪漫，还拍了好看的天空~</p><img src="https://i.loli.net/2021/08/31/LciHJZVfvGDN3jY.jpg" alt="CF1850FE-FDAF-41E6-AA7D-B4BFAA1B765C" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/31/25lk9ESKhzxYXRi.jpg" alt="D3662F7B-1439-4AED-92A8-B87D389856F1" style="zoom:80%;" /><img src="https://i.loli.net/2021/08/31/6htdMH2Rza3BFsx.jpg" alt="94703524-4DA4-4A01-88A5-A5D3F6748FAE" style="zoom:80%;" /><p>八月的最后一天，六点按时下班了。下班途中拍下了天空中一朵粉色的 ☁ 给八月划上一个结尾。</p><p>8 月 Ending———————————————————————————————————————————————————————-&gt;</p><img src="https://i.loli.net/2021/08/31/4E7sqI8i9ta5mno.jpg" alt="430F486A-4E18-4D6B-8219-3289C8C7BDE5" style="zoom:80%;" />]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用flask从0开发一个TODOlist</title>
    <link href="/posts/fabc6352.html"/>
    <url>/posts/fabc6352.html</url>
    
    <content type="html"><![CDATA[<h1 id="利用-flask-从-0-开发一个-TODOlist"><a href="#利用-flask-从-0-开发一个-TODOlist" class="headerlink" title="利用 flask 从 0 开发一个 TODOlist"></a>利用 flask 从 0 开发一个 TODOlist</h1><h2 id="0x00、环境准备"><a href="#0x00、环境准备" class="headerlink" title="0x00、环境准备"></a>0x00、环境准备</h2><h3 id="Python-环境的安装"><a href="#Python-环境的安装" class="headerlink" title="Python 环境的安装"></a>Python 环境的安装</h3><p>直接去百度搜 Python 进官网找到自己适合的版本进行安装</p><h3 id="编辑器的准备"><a href="#编辑器的准备" class="headerlink" title="编辑器的准备"></a>编辑器的准备</h3><ul><li><p>VSCODE 下新建一个工作文件夹 flask</p></li><li><p>控制台下<code>pip install virtualenv</code></p></li><li><p>进入 flask 文件夹下，<code>virtualenv venv</code>创建虚拟环境，避免外界影响</p><p><img src="https://i.loli.net/2021/06/28/lR789CEuVxsXoHL.png" alt="image-20210628095018555"></p></li><li><p><code>cd venv</code>后再执行<code>Scripts\activate</code>可激活虚拟环境，<code>deactivate</code>即可退出虚拟环境。</p></li></ul><p><img src="https://i.loli.net/2021/06/28/aNnE5gKeTs2iy4Y.png" alt="image-20210628095256688"></p><ul><li>进入虚拟环境后再进行 flask 报的安装<code>pip install flask flasksqlalchemy</code>，即可~</li></ul><h2 id="0x02、写一个-falsk-的-helloworld"><a href="#0x02、写一个-falsk-的-helloworld" class="headerlink" title="0x02、写一个 falsk 的 helloworld"></a>0x02、写一个 falsk 的 helloworld</h2><ul><li><p>在 flask 目录新建一个 app.py 的文件</p><p>输入</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure></li><li><p>在控制台输入<code>python app.py</code>即可启动服务[当前目录哦~]</p></li><li><p>在浏览器输入 localhost5000 即可看到显示的 helloworld!</p></li></ul><h2 id="0x03、模板引擎-Jinja2-语法介绍"><a href="#0x03、模板引擎-Jinja2-语法介绍" class="headerlink" title="0x03、模板引擎 Jinja2 语法介绍"></a>0x03、模板引擎 Jinja2 语法介绍</h2><blockquote><p>Jinja2 是一个现代的，设计者友好的，仿照 Django 模板的 Python 模板语言。 它速度快，被广泛使用，并且提供了可选的沙箱模板执行环境保证安全。 ###什么是模板引擎？<br>就是在一个静态 HTML 加入一些类似变量的标签，然后引擎在渲染这个 HTML 时候会动态的把变量填入内容，生成一个最终的 HTML。<br>Jinja2 是一个模版语言，只是类似 Python，比较符合 Python 语法，但不完全相同！<br>###Jinja2 语法 ####常见标记</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jinja2">注释：`&#123;# 这是注释 #&#125;`<br>变量：`&#123;&#123; post.title &#125;&#125;`，或字典元素 `&#123;&#123;your_dict[&#x27;key&#x27;]&#125;&#125;`，或列表 `&#123;&#123;your_list[0]&#125;&#125;`<br>多行代码块：`&#123;% 开始 %&#125; HTML 标签 &#123;% 结束 %&#125;`<br><br>&#123;% if user %&#125;<br>    &#123;&#123; user &#125;&#125;<br>&#123;% else %&#125;<br>    hello!<br>    &#123;% for index in indexs %&#125;<br>        &#123;&#123; index &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></div></td></tr></table></figure><p>####分隔符</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;% ... %&#125; 语句<br>&#123;&#123; ... &#125;&#125;打印出模板输出的表达式<br>&#123;# ... #&#125;注释<br>#... ## 行语句<br></code></pre></div></td></tr></table></figure><p>####变量<br>除了普通的字符串变量，Jinja2 还支持列表、字典和对象，你可以这样获取变量值：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jinja2">&#123;&#123; mydict[&#x27;key&#x27;] &#125;&#125;<br>&#123;&#123; mylist[3] &#125;&#125;<br>&#123;&#123; mylist[myintvar] &#125;&#125;<br>&#123;&#123; myobj.somemethod() &#125;&#125;<br></code></pre></div></td></tr></table></figure><h2 id="0x04、扩展"><a href="#0x04、扩展" class="headerlink" title="0x04、扩展"></a>0x04、扩展</h2><p>flask 文件夹下新建 static 和 templates 两个文件夹，分别用来存放 html 文件和 css 文件</p><p><img src="https://i.loli.net/2021/06/28/pDZN6fK9H57LoYs.png" alt="image-20210628210025489"></p><p>app.py 中 import<code> render_template</code>，在 temlates 文件夹下新建 index.html，再把<code>return &#39;hello world!&#39;</code>改为<code>return index.html</code>，就可以以另一种形式显示你的<code>hello world</code>！</p><p>在 base.html 文件加入 jinja2 语法：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;static/css/main.css&quot;&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123;url_for(&#x27;static&#x27;,filename=&#x27;css/main.css&#x27;)&#125;&#125;&quot;</span> /&gt;</span><br>    &#123;% block head %&#125; &#123;% endblock %&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &#123;% block body %&#125; &#123;% endblock %&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在 index.html 文件中写整体框架：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;% extends &#x27;base.html&#x27; %&#125; &#123;% block head %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Task Master<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125; &#123;% block body %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>Task Master<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  &#123;% if tasks|length &lt; 1 %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>There are no tasks. Create one below!<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>  &#123;% else %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Task<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Added<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Actions<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &#123;% for task in tasks %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; task.content &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; task.date_created.date() &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/delete/&#123;&#123;task.id&#125;&#125;&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/update/&#123;&#123;task.id&#125;&#125;&quot;</span>&gt;</span>Update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  &#123;% endif %&#125;<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Add Task&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure><p>app.py：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, url_for,request,redirect<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<span class="hljs-comment">#引入数据库</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///test.db&#x27;</span><br>db = SQLAlchemy(app)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span>(db.Model):<br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    content = db.Column(db.String(<span class="hljs-number">200</span>), nullable=<span class="hljs-literal">False</span>)<br>    date_created = db.Column(db.DateTime, default=datetime.utcnow)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;Task %r&gt;&#x27;</span> % self.<span class="hljs-built_in">id</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-comment"># pass</span><br>        <span class="hljs-comment"># return &#x27;hello&#x27;</span><br>        task_content = request.form[<span class="hljs-string">&#x27;content&#x27;</span>]<br>        new_task = Todo(content=task_content)<br><br>        <span class="hljs-keyword">try</span>:<br>            db.session.add(new_task)<br>            db.session.commit()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There was an issue adding your task&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        tasks = Todo.query.order_by(Todo.date_created).<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,tasks=tasks)<br>    <span class="hljs-comment"># return render_template(&#x27;index.html&#x27;)</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete/&lt;int:id&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    task_to_delete = Todo.query.get_or_404(<span class="hljs-built_in">id</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        db.session.delete(task_to_delete)<br>        db.session.commit()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There was a problem deleting that task&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/update/&lt;int:id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    task = Todo.query.get_or_404(<span class="hljs-built_in">id</span>)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        task.content = request.form[<span class="hljs-string">&#x27;content&#x27;</span>]<br><br>        <span class="hljs-keyword">try</span>:<br>            db.session.commit()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There was an issue updating your task&#x27;</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;update.html&#x27;</span>, task=task)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><p>为了使网页美观再加点 css</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>  <span class="hljs-attribute">background-color</span>: lightgreen;<br>&#125;<br><br><span class="hljs-selector-class">.content</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">table</span>,<br><span class="hljs-selector-tag">td</span>,<br><span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#aaa</span>;<br>&#125;<br><br><span class="hljs-selector-tag">table</span> &#123;<br>  <span class="hljs-attribute">border-collapse</span>: collapse;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">th</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">td</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.form</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#content</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">70%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>还有一个 update.html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&#123;% extends &#x27;base.html&#x27; %&#125; &#123;% block head %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Task Master<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125; &#123;% block body %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>Update Task<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/update/&#123;&#123;task.id&#125;&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;task.content&#125;&#125;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Update&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></div></td></tr></table></figure><p>控制台运行<code>python app.py</code></p><p><img src="https://i.loli.net/2021/06/28/QiVYTIcU9DAdug1.png" alt="image-20210628212136496"></p><p><img src="https://i.loli.net/2021/06/28/xoBp6lYNPEfOrjz.png" alt="image-20210628212413428"></p><p>大功告成啦！</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法分析期末复习</title>
    <link href="/posts/5e4ae95.html"/>
    <url>/posts/5e4ae95.html</url>
    
    <content type="html"><![CDATA[<h1 id="算法分析考试课后习题"><a href="#算法分析考试课后习题" class="headerlink" title="算法分析考试课后习题"></a>算法分析考试课后习题</h1><h2 id="chap1-概论"><a href="#chap1-概论" class="headerlink" title="chap1 概论"></a>chap1 概论</h2><h3 id="求包含-n-n-gt-1-个元素的无序序列中第-k-小的元素"><a href="#求包含-n-n-gt-1-个元素的无序序列中第-k-小的元素" class="headerlink" title="求包含 n(n&gt;1)个元素的无序序列中第 k 小的元素"></a>求包含 n(n&gt;1)个元素的无序序列中第 k 小的元素</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, less&lt;<span class="hljs-type">int</span>&gt;&gt; que; <span class="hljs-comment">//递增排序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;    <span class="hljs-comment">//输入的整数个数为n</span><br>    cin &gt;&gt; n; <span class="hljs-comment">//输入n</span><br>    <span class="hljs-type">int</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-comment">//输入n个数</span><br>    &#123;<br>        cin &gt;&gt; a[i];    <span class="hljs-comment">//输入a[n]</span><br>        que.<span class="hljs-built_in">push</span>(a[i]); <span class="hljs-comment">//插入到队尾</span><br>    &#125;<br>    <span class="hljs-type">int</span> m; <span class="hljs-comment">//需要输出的第k个数</span><br>    cin &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - m; i++)<br>    &#123;<br>        que.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//弹出队头元素</span><br>    &#125;<br>    cout &lt;&lt; que.<span class="hljs-built_in">top</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="学生体型排序（提示：使用优先队列实现）"><a href="#学生体型排序（提示：使用优先队列实现）" class="headerlink" title="学生体型排序（提示：使用优先队列实现）"></a>学生体型排序（提示：使用优先队列实现）</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">// #include &lt;cstdio&gt;</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Comp</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j = <span class="hljs-number">0</span>;<br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        pq.<span class="hljs-built_in">push</span>(a[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        j = pq.<span class="hljs-built_in">top</span>();<br>        pq.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;    <span class="hljs-comment">//输入的整数个数</span><br>    cin &gt;&gt; x; <span class="hljs-comment">//输入x</span><br>    <span class="hljs-type">int</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[x];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; x; i++)<br>    &#123; <span class="hljs-comment">//输入a[x]</span><br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> y; <span class="hljs-comment">//需要输出的第k=y大的数</span><br>    cin &gt;&gt; y;<br>    <span class="hljs-type">int</span> n = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k == y)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">Comp</span>(a, n, k);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="chap2-递归"><a href="#chap2-递归" class="headerlink" title="chap2 递归"></a>chap2 递归</h2><h3 id="小明的幸运数"><a href="#小明的幸运数" class="headerlink" title="小明的幸运数"></a>小明的幸运数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//函数实现</span><br><span class="hljs-comment">//十进制</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sum1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span>)<br>    &#123;<br>        sum1 += x % <span class="hljs-number">10</span>;<br>        x = x / <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum1;<br>&#125;<br><span class="hljs-comment">//二进制</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">g</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sum2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (y != <span class="hljs-number">0</span>)<br>    &#123;<br>        sum2 += y % <span class="hljs-number">2</span>;<br>        y = y / <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<span class="hljs-comment">//输入n</span><br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; <span class="hljs-comment">//计数器</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">f</span>(i) == <span class="hljs-built_in">g</span>(i))<br>        &#123;<br>            a++;<span class="hljs-comment">//计数</span><br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    cout &lt;&lt; a &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="判断回文串"><a href="#判断回文串" class="headerlink" title="判断回文串"></a>判断回文串</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Palindrome</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>||s.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>]!=s[s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Palindrome</span>(s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>, s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string chuan;<br>    cin &gt;&gt; chuan;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">Palindrome</span>(chuan))<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="chap3-分治"><a href="#chap3-分治" class="headerlink" title="chap3 分治"></a>chap3 分治</h2><h3 id="逆序对"><a href="#逆序对" class="headerlink" title="逆序对"></a>逆序对</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">//暴力枚举</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> counter = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i, j;<br><br>    cin &gt;&gt; num;<br>    <span class="hljs-type">int</span> a[num];<span class="hljs-comment">//定义一个数组来接收输入的数字</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; num; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[j] &lt; a[i])<br><br>                counter++;<br><br>        &#125;<br>    &#125;<br>    cout &lt;&lt; counter &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="设计一个算法，采用分治法求一个整数序列中的最大和最小元素。"><a href="#设计一个算法，采用分治法求一个整数序列中的最大和最小元素。" class="headerlink" title="设计一个算法，采用分治法求一个整数序列中的最大和最小元素。"></a>设计一个算法，采用分治法求一个整数序列中的最大和最小元素。</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//采用分治法寻找序列中的最大和最小值</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(x, y) x &gt;= y ? x : y</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> min(x, y) x &lt;= y ? x : y</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 0x3f3f3f3f</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">200</span>; <span class="hljs-comment">//数组最大尺寸200</span><br><span class="hljs-type">int</span> a[maxn];<br><br><span class="hljs-type">int</span> Max, Min;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Max = -INF;<br>    Min = INF;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PartGet</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (left == right)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[left] &gt; Max)<br>            Max = a[left];<br>        <span class="hljs-keyword">if</span> (a[left] &lt; Min)<br>            Min = a[left];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">PartGet</span>(left, mid);<br>    <span class="hljs-built_in">PartGet</span>(mid + <span class="hljs-number">1</span>, right);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> Size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; Size &amp;&amp; Size)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Size; i++)<br>            cin &gt;&gt; a[i];<br><br>        <span class="hljs-built_in">init</span>();<br><br>        <span class="hljs-built_in">PartGet</span>(<span class="hljs-number">0</span>, Size - <span class="hljs-number">1</span>);<br><br>        cout &lt;&lt; Max &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt; Min &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="折半查找法的使用"><a href="#折半查找法的使用" class="headerlink" title="折半查找法的使用"></a>折半查找法的使用</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    string strTemp;<br>    stringstream sStream;<br>    cin &gt;&gt; i;<br>    <span class="hljs-comment">// int i = 0;</span><br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-comment">// char sep;</span><br>    cin &gt;&gt; strTemp;<br>    <span class="hljs-type">int</span> pos = strTemp.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-keyword">while</span> (pos != string::npos)<br>    &#123;<br>        strTemp = strTemp.<span class="hljs-built_in">replace</span>(pos, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27; &#x27;</span>); <span class="hljs-comment">//将字符串中的&#x27;,&#x27;用空格代替</span><br>        pos = strTemp.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    &#125;<br><br>    sStream &lt;&lt; strTemp; <span class="hljs-comment">//将字符串导入的流中</span><br><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>    &#123;<br>        <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;a[i]);</span><br>        <span class="hljs-comment">// cin &gt;&gt; a[k];</span><br>        <span class="hljs-keyword">while</span> (sStream)<br>        &#123;<br>            sStream &gt;&gt; a[k++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> num;<br>    cin &gt;&gt; num;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = i - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> b[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> b1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[(left + right) / <span class="hljs-number">2</span>] == num)<br>        &#123;<br>            b[b1++] = num;<br>            index = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[(left + right) / <span class="hljs-number">2</span>] &lt; num)<br>        &#123;<br>            b[b1++] = a[(left + right) / <span class="hljs-number">2</span>];<br>            left = (left + right) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[(left + right) / <span class="hljs-number">2</span>] &gt; num)<br>        &#123;<br>            b[b1++] = a[(left + right) / <span class="hljs-number">2</span>];<br>            right = (left + right) / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>        &#125;<br>        i = right - left;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index != <span class="hljs-number">-1</span>)<br>    &#123;<br>        cout &lt;&lt; index &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;no&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; b1; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(k&lt;(b1<span class="hljs-number">-1</span>))<br>            cout &lt;&lt; b[k] &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; b[k];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="chap4-蛮力"><a href="#chap4-蛮力" class="headerlink" title="chap4 蛮力"></a>chap4 蛮力</h2><h3 id="九个数字分别组成三个三位数，比例为-1-2-3"><a href="#九个数字分别组成三个三位数，比例为-1-2-3" class="headerlink" title="九个数字分别组成三个三位数，比例为 1:2:3"></a>九个数字分别组成三个三位数，比例为 1:2:3</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br><span class="hljs-comment">//暴力法+递归</span><br><span class="hljs-comment">// 1 2 3</span><br><span class="hljs-comment">// 4 5 6</span><br><span class="hljs-comment">// 7 8 9</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">force</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (num &gt;= <span class="hljs-number">9</span>)<br>    &#123;<br>        <span class="hljs-type">double</span> one, two, three;<br>        one = a[<span class="hljs-number">0</span>] * <span class="hljs-number">100</span> + a[<span class="hljs-number">1</span>] * <span class="hljs-number">10</span> + a[<span class="hljs-number">2</span>];<br>        two = a[<span class="hljs-number">3</span>] * <span class="hljs-number">100</span> + a[<span class="hljs-number">4</span>] * <span class="hljs-number">10</span> + a[<span class="hljs-number">5</span>];<br>        three = a[<span class="hljs-number">6</span>] * <span class="hljs-number">100</span> + a[<span class="hljs-number">7</span>] * <span class="hljs-number">10</span> + a[<span class="hljs-number">8</span>];<br>        <span class="hljs-keyword">if</span>(two / one == <span class="hljs-number">2</span> &amp;&amp; three / one == <span class="hljs-number">3</span>)<br>        &#123;<br>            cout &lt;&lt; one &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; two &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; three &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = num; i &lt; <span class="hljs-number">9</span>; i++)<br>        &#123;<br>            n = a[i];<br>            a[i] = a[num];<br>            a[num] = n;<br>            force(num + <span class="hljs-number">1</span>);<br>            n = a[i];<br>            a[i] = a[num];<br>            a[num] = n;<br>        &#125;<br>    &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//关掉scanf 和cin 的同步加快效率</span><br>    force(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h3 id="马虎的算式"><a href="#马虎的算式" class="headerlink" title="马虎的算式"></a>马虎的算式</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a, b, c, d, e;<br><span class="hljs-type">int</span> counter = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (a = <span class="hljs-number">1</span>; a &lt;= <span class="hljs-number">9</span>; a++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (b = <span class="hljs-number">1</span>; b &lt;= <span class="hljs-number">9</span>; b++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (c = <span class="hljs-number">1</span>; c &lt;= <span class="hljs-number">9</span>; c++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (d = <span class="hljs-number">1</span>; d &lt;= <span class="hljs-number">9</span>; d++)<br>                &#123;<br>                    <span class="hljs-keyword">for</span> (e = <span class="hljs-number">1</span>; e &lt;= <span class="hljs-number">9</span>; e++)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (a != b &amp;&amp; a != c &amp;&amp; a != d &amp;&amp; a != e &amp;&amp; b != c &amp;&amp; b != d &amp;&amp; b != e &amp;&amp; c != d &amp;&amp; c != e &amp;&amp; d != e)<br>                        &#123;<br>                            <span class="hljs-keyword">if</span> ((a * <span class="hljs-number">10</span> + b) * (c * <span class="hljs-number">100</span> + d * <span class="hljs-number">10</span> + e) == (a * <span class="hljs-number">100</span> + d * <span class="hljs-number">10</span> + b) * (c * <span class="hljs-number">10</span> + e))<br>                                counter++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; counter &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="鸡兔只数"><a href="#鸡兔只数" class="headerlink" title="鸡兔只数"></a>鸡兔只数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> rabbit_chicken;<span class="hljs-comment">//鸡和兔的数量</span><br>    <span class="hljs-type">int</span> rabbit_foot, chicken_foot; <span class="hljs-comment">//兔脚鸡脚</span><br>    <span class="hljs-type">int</span> x, y, z;                   <span class="hljs-comment">//鸡脚百位十位个位</span><br>    <span class="hljs-type">int</span> a, b, c;                   <span class="hljs-comment">//兔脚百位十位个位</span><br>    <span class="hljs-keyword">for</span> (x = <span class="hljs-number">1</span>; x &lt;= <span class="hljs-number">5</span>; x++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (a = <span class="hljs-number">1</span>; a &lt;= <span class="hljs-number">5</span>; a++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (y = <span class="hljs-number">0</span>; y &lt;= <span class="hljs-number">5</span>; y++)<br>            &#123;<br>                    <span class="hljs-keyword">for</span> (b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">5</span>; b++)<br>                    &#123;<br>                        <span class="hljs-keyword">for</span> (z = <span class="hljs-number">0</span>; z &lt;= <span class="hljs-number">5</span>; z++)<br>                        &#123;<br>                            <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">5</span>; c++)<br>                            &#123;<br>                                chicken_foot = (z + y * <span class="hljs-number">10</span> + x * <span class="hljs-number">100</span>);<br>                                rabbit_foot = (c + b * <span class="hljs-number">10</span> + a * <span class="hljs-number">100</span>);<br>                                <span class="hljs-keyword">if</span> (chicken_foot % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; rabbit_foot % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)<br>                                &#123;<br>                                    <span class="hljs-keyword">if</span> (chicken_foot / <span class="hljs-number">2</span> == rabbit_foot / <span class="hljs-number">4</span>)<br>                                    &#123;<br>                                        rabbit_chicken = (chicken_foot / <span class="hljs-number">2</span>);<br>                                        cout &lt;&lt; rabbit_chicken &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; rabbit_chicken &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; chicken_foot &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; rabbit_foot &lt;&lt; endl;<br>                                    &#125;<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="chap5-回溯"><a href="#chap5-回溯" class="headerlink" title="chap5 回溯"></a>chap5 回溯</h2><h3 id="从一组整数中选择若干个-使它们的和恰好为指定的数-要求找出选择元素个数最少的解"><a href="#从一组整数中选择若干个-使它们的和恰好为指定的数-要求找出选择元素个数最少的解" class="headerlink" title="从一组整数中选择若干个,使它们的和恰好为指定的数,要求找出选择元素个数最少的解"></a>从一组整数中选择若干个,使它们的和恰好为指定的数,要求找出选择元素个数最少的解</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">To_Judge</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Backtrace</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> num,<span class="hljs-type">int</span> r)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Layer</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> num,<span class="hljs-type">int</span> r)</span></span>;<br><span class="hljs-type">int</span> n, k, r = <span class="hljs-number">0</span>, flag = <span class="hljs-number">0</span>, operation[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;, s[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">To_Judge</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i)</span> </span>&#123;<span class="hljs-comment">//判断并存储序号</span><br><span class="hljs-keyword">if</span> (sum &gt; k)<span class="hljs-comment">//已在op里或和大于k</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>sum += array[i];<br>operation[num] = i;<br><span class="hljs-keyword">if</span> (sum==k &amp;&amp; num&lt;=r)<br>&#123;<br>r = num;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; r+<span class="hljs-number">1</span>; j++)<br>&#123;<br>s[j - <span class="hljs-number">1</span>] = array[operation[j]];<br>&#125;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">Backtrace</span>(array, sum, num + <span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Layer</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> num,<span class="hljs-type">int</span> r)</span> </span>&#123;<span class="hljs-comment">//树每层能取的值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt;= n; i++)<br>&#123;<br><span class="hljs-built_in">To_Judge</span>(array, sum, num, i);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Backtrace</span><span class="hljs-params">(<span class="hljs-type">int</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> num,<span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-comment">//树深度num行</span><br><span class="hljs-keyword">if</span> (num &gt; n)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-built_in">Layer</span>(array, sum, num, r);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> array[<span class="hljs-number">20</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>cin &gt;&gt; n;<br>cin &gt;&gt; k;<br>r = n;<br><span class="hljs-keyword">for</span> ( <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; array[i];<br>&#125;<br><span class="hljs-built_in">Backtrace</span>(array, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (flag==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No solution&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++)<br>&#123;<br>cout &lt;&lt; s[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl &lt;&lt; r;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="回溯法求组合"><a href="#回溯法求组合" class="headerlink" title="回溯法求组合"></a>回溯法求组合</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">To_Judge</span><span class="hljs-params">(<span class="hljs-type">char</span> arr[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i,<span class="hljs-type">int</span> k)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Backtrace</span><span class="hljs-params">(<span class="hljs-type">char</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> k)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Layer</span><span class="hljs-params">(<span class="hljs-type">char</span> arr[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> k)</span></span>;<br><span class="hljs-type">char</span> operation[<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">To_Judge</span><span class="hljs-params">(<span class="hljs-type">char</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i,<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt; n)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        operation[num] = array[i];<br>        <span class="hljs-built_in">Backtrace</span>(array, num + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>    &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Layer</span><span class="hljs-params">(<span class="hljs-type">char</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">To_Judge</span>(array, num, i, k);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Backtrace</span><span class="hljs-params">(<span class="hljs-type">char</span> array[<span class="hljs-number">20</span>], <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (num &gt;= m)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            cout &lt;&lt; operation[i];<br>        &#125;<br>        cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">Layer</span>(array, num, k);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> array[<span class="hljs-number">20</span>];<br>    cin &gt;&gt; n;<span class="hljs-comment">//所有字符的个数</span><br>    cin &gt;&gt; m;<span class="hljs-comment">//指定字符的个数</span><br>    cin &gt;&gt; array;<br>    <span class="hljs-built_in">Backtrace</span>(array, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="chap6-分支限界法"><a href="#chap6-分支限界法" class="headerlink" title="chap6 分支限界法"></a>chap6 分支限界法</h2><h3 id="马儿偷懒"><a href="#马儿偷懒" class="headerlink" title="马儿偷懒"></a>马儿偷懒</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">500</span>;<br>queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q; <span class="hljs-comment">//马能走到的棋盘上的坐标</span><br><span class="hljs-type">bool</span> vis[maxn][maxn]; <span class="hljs-comment">//表示是否已经访问过</span><br><span class="hljs-type">int</span> n, m, sx, sy, len[maxn][maxn];<br><span class="hljs-type">int</span> sum;                                                                  <span class="hljs-comment">//表示马到达该坐标处的最少步数</span><br><span class="hljs-type">int</span> dis[<span class="hljs-number">8</span>][<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>&#125;; <span class="hljs-comment">//马可以走的八个方向</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(sx, sy)); <span class="hljs-comment">//入队</span><br>    vis[sx][sy] = <span class="hljs-number">1</span>;           <span class="hljs-comment">//标记已经访问过</span><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-comment">//取队首元素</span><br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>().first;<br>        <span class="hljs-type">int</span> y = q.<span class="hljs-built_in">front</span>().second;<br>        q.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//出队</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>        &#123; <span class="hljs-comment">//遍历可走的方向</span><br>            <span class="hljs-type">int</span> dx = x + dis[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> dy = y + dis[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (dx &gt;= <span class="hljs-number">1</span> &amp;&amp; dx &lt;= n &amp;&amp; dy &gt;= <span class="hljs-number">1</span> &amp;&amp; dy &lt;= m &amp;&amp; !vis[dx][dy])<br>            &#123;                                <span class="hljs-comment">//可达点</span><br>                vis[dx][dy] = <span class="hljs-number">1</span>;             <span class="hljs-comment">//标记已访问过</span><br>                len[dx][dy] = len[x][y] + <span class="hljs-number">1</span>; <span class="hljs-comment">//距离加1</span><br>                q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(dx, dy));   <span class="hljs-comment">//以该点起点</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; sx &gt;&gt; sy;    <span class="hljs-comment">//输入棋盘大小，马的初始位置</span><br>    <span class="hljs-built_in">memset</span>(len, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(len)); <span class="hljs-comment">//初始距离为-1，表示不能到达</span><br>    len[sx][sy] = <span class="hljs-number">0</span>;              <span class="hljs-comment">//起点到起点距离为0</span><br><br>    <span class="hljs-comment">//bfs求解马到棋盘上任意一点的最少步数</span><br>    <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            sum += len[i][j];<br>            <span class="hljs-comment">// cout &lt;&lt; len[i][j] &lt;&lt; &quot; &quot;;</span><br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; endl;</span><br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="刺杀行动"><a href="#刺杀行动" class="headerlink" title="刺杀行动"></a>刺杀行动</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> map[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">edge</span>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>&#125;;<br>queue&lt;edge&gt;q;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(vis));<br>    edge s;<br>    s.x=<span class="hljs-number">1</span>,s.y=<span class="hljs-number">1</span>;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        edge u=q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> mx=u.x+dx[i],my=u.y+dy[i];<br>            <span class="hljs-keyword">if</span>(mx&gt;=<span class="hljs-number">1</span>&amp;&amp;mx&lt;=n&amp;&amp;my&gt;=<span class="hljs-number">1</span>&amp;&amp;my&lt;=m&amp;&amp;!vis[mx][my]&amp;&amp;map[mx][my]&lt;=mid)<br>            &#123;<br>                vis[mx][my]=<span class="hljs-number">1</span>;<br>                q.<span class="hljs-built_in">push</span>((edge)&#123;mx,my&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">bool</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[n][i])<br>        &#123;<br>            flag=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;map[i][j]);<br>            r=<span class="hljs-built_in">max</span>(r,map[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">21474836</span>;<br>    <span class="hljs-keyword">while</span>(l&lt;=r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))<br>        &#123;<br>            r=mid<span class="hljs-number">-1</span>;<br>            ans=<span class="hljs-built_in">min</span>(ans,mid);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="chap7-贪心"><a href="#chap7-贪心" class="headerlink" title="chap7 贪心"></a>chap7 贪心</h2><h3 id="数字接龙"><a href="#数字接龙" class="headerlink" title="数字接龙"></a>数字接龙</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Solution</span>() &#123;&#125;<br>    ~<span class="hljs-built_in">Solution</span>() &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; &amp;g, std::vector&lt;<span class="hljs-type">int</span>&gt; &amp;s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::<span class="hljs-built_in">sort</span>(g.<span class="hljs-built_in">begin</span>(), g.<span class="hljs-built_in">end</span>());<br>        std::<span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> child = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cookie = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (child &lt; g.<span class="hljs-built_in">size</span>() &amp;&amp; cookie &lt; s.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[child] &lt;= s[cookie])<br>            &#123;<br>                child++;<br>            &#125;<br>            cookie++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> child;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-comment">// cin &lt;&lt; n;</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-type">int</span> x;<br>    Solution solve;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; g;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        g.<span class="hljs-built_in">push_back</span>(x); &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        s.<span class="hljs-built_in">push_back</span>(x);&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, solve.<span class="hljs-built_in">findContentChildren</span>(g, s));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="小民喂兔子"><a href="#小民喂兔子" class="headerlink" title="小民喂兔子"></a>小民喂兔子</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">// #include &lt;algorithm&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">com</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// int a1 = a, b1 = b;</span><br>    <span class="hljs-type">int</span> la = <span class="hljs-number">10</span>, lb = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (a / la)<br>    &#123;<br>        la *= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b / lb)<br>    &#123;<br>        lb *= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (a * lb + b) - (b * la + a);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span>  i, j, n;<br>    <span class="hljs-type">int</span> d[<span class="hljs-number">20</span>], t;<br>    <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;n);</span><br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;d[i]);</span><br>        cin &gt;&gt; d[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span>; j++)<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span> - j; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">com</span>(d[i], d[i + <span class="hljs-number">1</span>]) &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                t = d[i + <span class="hljs-number">1</span>];<br>                d[i + <span class="hljs-number">1</span>] = d[i];<br>                d[i] = t;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        cout &lt;&lt; d[i];<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="chap8-动态规划"><a href="#chap8-动态规划" class="headerlink" title="chap8 动态规划"></a>chap8 动态规划</h2><h3 id="求解机器人移动的路径数"><a href="#求解机器人移动的路径数" class="headerlink" title="求解机器人移动的路径数"></a>求解机器人移动的路径数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">route</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">route</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>&amp;&amp;y==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">route</span>(x, y - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">route</span>(x - <span class="hljs-number">1</span>, y);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">route</span>(x - <span class="hljs-number">1</span>, y) + <span class="hljs-built_in">route</span>(x, y - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    cout &lt;&lt; <span class="hljs-built_in">route</span>(n, m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="最少硬币找零问题"><a href="#最少硬币找零问题" class="headerlink" title="最少硬币找零问题"></a>最少硬币找零问题</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n, t;<br><span class="hljs-type">int</span> val[<span class="hljs-number">60</span>];<br><span class="hljs-type">int</span> num[<span class="hljs-number">100010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;t) == <span class="hljs-number">2</span> &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(num, inf, <span class="hljs-built_in">sizeof</span>(num));<br>        num[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            cin &gt;&gt; val[i];<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i &gt;= val[j])<br>                    num[i] = <span class="hljs-built_in">min</span>(num[i], num[i - val[j]] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = t; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (num[i] &lt; inf)<br>            &#123;<br>                cout &lt;&lt; num[i]&lt;&lt; endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;no answer&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="算法分析基础知识"><a href="#算法分析基础知识" class="headerlink" title="算法分析基础知识"></a>算法分析基础知识</h1><h3 id="算法的特征："><a href="#算法的特征：" class="headerlink" title="算法的特征："></a>算法的特征：</h3><p>输入，输出，确定性，有穷性，可行性</p><h4 id="常见的大-O-表达式"><a href="#常见的大-O-表达式" class="headerlink" title="常见的大 O 表达式"></a><strong>常见的大 O 表达式</strong></h4><p><img src="https://i.loli.net/2021/06/12/zNBsYOVcvSFEPlL.png" alt="img"></p><h4 id="NP（Non-Deterministic-Polynomial，非确定多项式）问题："><a href="#NP（Non-Deterministic-Polynomial，非确定多项式）问题：" class="headerlink" title="NP（Non-Deterministic Polynomial，非确定多项式）问题："></a><strong>NP（Non-Deterministic Polynomial，非确定多项式）问题：</strong></h4><p>是指时间复杂度为非多项式量级的算法问题。当数据规模 n 越来越大时，非多项式量级算法的执行会急剧增加，求解问题的执行时间无限增长。所以，非多项式时间复杂度的算法是非常低效的。</p><p>常见复杂度从低阶到高阶有：</p><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2)</p><p><img src="https://i.loli.net/2021/06/12/L6aXZUOltYHxFPK.png" alt="img"></p><h4 id="最好、最坏情况时间复杂度"><a href="#最好、最坏情况时间复杂度" class="headerlink" title="最好、最坏情况时间复杂度"></a>最好、最坏情况时间复杂度</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">function <span class="hljs-title">find</span><span class="hljs-params">(array,x)</span></span>&#123;<br>    var pos = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(var i=<span class="hljs-number">0</span>;i&lt;array.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(array[i] == x)&#123;<br>            pos = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pos;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面代码表示，查找变量 x 在数组 array 的位置。如果 x 不在数组 array 里，则返回-1。通过从数组第一个元素开始找，当找到变量 x 时则不继续往下找。否则，会遍历完整个数组。最好情况是，数组第一个元素就是要找的变量 x，此时的时间复杂度为 O(1)，即最好情况时间复杂度。最坏情况是，要遍历完整个数组，此时的时间复杂度为 O(n)，即最坏情况时间复杂度。</p><h3 id="基本数据结构：线性结构，树结构，图结构，集合"><a href="#基本数据结构：线性结构，树结构，图结构，集合" class="headerlink" title="基本数据结构：线性结构，树结构，图结构，集合"></a><strong>基本数据结构：线性结构，树结构，图结构，集合</strong></h3><h4 id="递归与分治"><a href="#递归与分治" class="headerlink" title="递归与分治"></a><strong>递归与分治</strong></h4><p>1、递归法</p><p>使用递归方法时须注意的问题：</p><p>(1) 递归调用函数必须在满足某个条件时能够退出该程序</p><p>(2) 递归调用由于使用堆栈，因此占用的存储空间会很大，且所花费的时间也很多，因而效率低下。</p><p>2、分治法</p><p>将一个规模比较大的问题分解成若干个规模较小的问题，然后将这些子问题的解合并解出整个问题的解。</p><h4 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a><strong>什么是数组</strong></h4><p>数组（Array）是一种 <strong>线性表</strong> 数据结构，它用一组 <strong>连续的内存空间</strong>，来存储一组具有<strong>相同类型的数据</strong>。</p><h4 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a><strong>线性表</strong></h4><p>线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。具有线性表结构的数据结构有：数组、链表、队列、栈等</p><p><img src="https://i.loli.net/2021/06/12/SMUZBvAG1TC4a6V.png" alt="img"></p><p>与之相对立的概念是非线性表，比如二叉树、堆、图等。非线性表中的数据之间并不是简单的前后关系。</p><p><img src="https://i.loli.net/2021/06/12/B89DurzMPfhOIgs.png" alt="img"></p><h4 id="连续的内存空间和相同类型的数据"><a href="#连续的内存空间和相同类型的数据" class="headerlink" title="连续的内存空间和相同类型的数据"></a><strong>连续的内存空间和相同类型的数据</strong></h4><p>因为有连续的内存空间和相同类型的数据这两个限制，数组才有 <strong>随机访问</strong> 的特性。同时，也因为这两个条件限制，让数组的很多操作变得非常低效，比如在数组中进行删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</p><h4 id="数组如何实现随机访问"><a href="#数组如何实现随机访问" class="headerlink" title="数组如何实现随机访问"></a><strong>数组如何实现随机访问</strong></h4><p><img src="https://i.loli.net/2021/06/12/fw5szd3R9MeAtF1.png" alt="img"></p><p>举个例子说明：当创建一个长度为 10 的数组 arr 时，计算机给数组 arr 分配一块连续内存空间 1000~1039。同时，计算机也会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数组。其中，内存块的首地址为 base_address = 1000.</p><p>当计算机需要随机访问数组中的某个元素时，首先通过下面的寻址公式，计算出该元素的内存地址</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 汇编">a[i]_address = base_address + i*data_type_size<br></code></pre></div></td></tr></table></figure><p>其中 data_type_size 表示数组中每个元素的大小。</p><h4 id="容器能否完全代替数据"><a href="#容器能否完全代替数据" class="headerlink" title="容器能否完全代替数据"></a><strong>容器能否完全代替数据</strong></h4><p>针对数组类型，很多语音都提供了容器类，比如 JavaScript 中的 Array()、Java 中的 ArrayList、<strong>C++STL 中的 vector</strong>。</p><p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。当分配的内存空间不够用时，就需要重新分配更大的空间，将原来的数据复制过去。</p><p>而容器是将数组的一些操作的细节封装起来，而且支持动态扩容。这样，你就不需要关系底层的扩容逻辑，容器会自动分配更大的内存空间。因此，容器的性能会比直接使用数组，会有一定的性能消耗。</p><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><strong>缓存</strong></h4><p>缓存是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。缓存就是利用空间换时间的设计思想，将数据加载在内存中来提高数据查询的速度。</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a><strong>链表</strong></h4><p>与数组相反，链表不需要一块连续的内存空间，而是通过“指针”将一组零散的内存块串联起来。其中，内存块称为链表的“结点”。每个结点除了存储数据 data 外，还记录链上的下一个结点的地址，我们把这个记录下个结点地址的指针叫作后续指针 next</p><ul><li>链表的优点：插入和删除一个数据非常快，时间复杂度是 O(1)</li><li>链表的缺点：随机访问数据却没有数组好，时间复杂度是 O(n)</li></ul><p>注：在链表插入和删除一个数据这个动作是非常快，但要找到要插入的位置或要删除的数据就慢了</p><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a><strong>单链表</strong></h4><p>头结点：指第一个结点，用来记录链表的基地址</p><p>尾结点：指最后一个结点。不过这个结点的指针不是指下一个结点，而是指向一个空地址 NULL，表示这是链表上最后一个结点</p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a><strong>循环链表</strong></h4><p>与单链表的区别在于：循环链表的尾结点指针指向链表的头结点，像是把一条绳子的头尾相连，变成一个环。与单链表相比，循环链表的优点是从链尾到链头比较方便。循环链表适合处理具有环型结构的数据。</p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a><strong>双向链表</strong></h4><p>单链表只有一个方向，结点只有一个后续指针 next 指向后面的结点。而双向链表支持两个方向，每个结点除了有后续指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。</p><h4 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a><strong>双向循环链表</strong></h4><p>循环链表+双向链表</p><h4 id="如何基于链表实现-LRU-缓存淘汰算法？"><a href="#如何基于链表实现-LRU-缓存淘汰算法？" class="headerlink" title="如何基于链表实现 LRU 缓存淘汰算法？"></a><strong>如何基于链表实现 LRU 缓存淘汰算法？</strong></h4><p>思路：我们维护一个有序单链表，越靠近链表尾部的结点时越早之前访问的。当一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p><p>1.如果此数据之前已经被缓存在链表中来，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部</p><p>2.如果此数据没有在缓存链表中，又可以分为两种情况：</p><ul><li><p>如果此时缓存未满，则将此结点直接插入到链表的头部；</p></li><li><p>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部</p></li></ul><p>####<strong>栈</strong><br>栈的特点是先进先出，只允许在一端插入和删除数据。</p><ul><li>栈顶：栈的最后一个元素</li><li>栈底：栈的第一个元素</li><li>出栈：从栈顶删除最后一个元素</li><li>入栈：向栈顶压入新的元素 ####<strong>队列</strong></li></ul><p>队列的特征是，先进先出。跟栈一样，队列也是一种操作受限的线性表数据结构。</p><p>队列的基本操作：</p><ul><li><p>入列：在队列尾部添加一个元素</p></li><li><p>出列：从队列头部移除一个元素</p></li></ul><h4 id="树"><a href="#树" class="headerlink" title="树"></a><strong>树</strong></h4><p><img src="https://i.loli.net/2021/06/12/YvSiKI25Rm49uLd.png" alt="img"></p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a><strong>二叉树</strong></h4><p>二叉树是最常用的树结构。每个节点<strong>最多</strong>有两个子节点，分别为左子节点和右子节点。二叉树可以同时有两个左右子节点，也可以只有一个左子节点或右子节点。</p><p><img src="https://i.stack.imgur.com/MeMzS.png" alt="img"></p><p>存储二叉树有两种方法：</p><ul><li><p>基于指针或者引用的链式存储法</p></li><li><p>基于数组的顺序存储法</p></li></ul><ol><li>链式存储法：</li></ol><p>每个节点有三个字段，一个存储数据，另外两个左右两个子节点的指针。只要找到根节点，就可以通过左右子节点的指针将整颗树串起来。</p><ol start="2"><li>数组的顺序存储法：</li></ol><p>把根节点存在下标为 i = 1 的位置，左子节点存储在下标为 2*i = 2 的位置，右子节点存储在下标为 2 *i + 1 = 3 的位置。以此类推，B 节点左子节点存储在 2 _ i = 2 _ 2 = 4 的位置，右子节点存储在 2 _ i + 1 = 2 _ 2 + 1 = 5 的位置。</p><p><img src="https://i.loli.net/2021/06/12/BSKlY2xk95pmuzH.jpg" alt="1569773359693-342473c6-f5e6-43be-95fd-abe396c32a9b"></p><h4 id="满二叉树（Fully-Binary-Tree）"><a href="#满二叉树（Fully-Binary-Tree）" class="headerlink" title="满二叉树（Fully Binary Tree）"></a><strong>满二叉树（Fully Binary Tree）</strong></h4><p><img src="https://i.loli.net/2021/06/12/6A7f1MuqknlIGma.png" alt="1569773360395-1c42f71d-af37-40a0-9225-1a6ca099c686"></p><p>叶子节点全部在最底层，且除叶子节点外，每个节点都有左右两个子节点</p><h5 id="完全二叉树（Complete-Binary-Tree）"><a href="#完全二叉树（Complete-Binary-Tree）" class="headerlink" title="完全二叉树（Complete Binary Tree）"></a><strong>完全二叉树（Complete Binary Tree）</strong></h5><p><img src="https://i.loli.net/2021/06/12/wAYHn6Jip4rbkMs.png" alt="1569773364572-6858d889-535a-4a8a-8fb0-9e192c4b62ea"></p><p>叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大。</p><h4 id="分治法（分解，解决，合并）"><a href="#分治法（分解，解决，合并）" class="headerlink" title="分治法（分解，解决，合并）"></a><strong>分治法（分解，解决，合并）</strong></h4><p>算法思想：为了解决一个大的问题，可以：1) 把它分成两个或多个更小的问题； 2) 分别解决每个小问题； 3) 把各小问题的解答组合起来，即可得到原问题的解答。小问题通常与原问题相似，可以递归地使用分而治之策略来解决。</p><p>选择排序算法时间复杂度 O（n 平方）</p><p>归并排序程序将花费(nlogn) 的时间。</p><p>快速排序时间复杂度：</p><p>T（n）=T（n-1）+O(n)</p><p>最好情况：</p><p>T（n）=2T(n/2)+O(n)</p><h4 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a><strong>动态规划算法</strong></h4><p>动态规划算法的特点：</p><p>动态归化算法是将问题分解成若干个子问题，通过求解这些子问题的最优解来求整个问题的最优解。与分治法不同的是，这些子问题往往并不相互独立，不能将子问题的解作为最后问题的解。动态规划往往用于求解问题的最优解</p><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>贪心算法的基本要素：贪心选择和最优子结构</p><h4 id="分支限界法"><a href="#分支限界法" class="headerlink" title="分支限界法"></a>分支限界法</h4><p>以广度优先或最小耗费方式搜索问题解的算法叫分支限界法，分支限界法分为两种：队列式和优先队列式</p><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a><strong>回溯</strong></h4><p>回溯（backtracking）是一种系统地搜索问题解答的方法。为了实现回溯，首先需要为问题定义一个解空间（ solution space），这个空间必须至少包含问题的一个解（可能是最优的）。下一步是组织解空间以便它能被容易地搜索。典型的组织方法是图或树。一旦定义了解空间的组织方法，这个空间即可按深度优先的方法从开始节点进行搜索。</p><p>回溯方法的步骤如下：</p><p>(1)定义一个解空间，它包含问题的解。</p><p>(2)用适于搜索的方式组织该空间。</p><p>(3)用深度优先法搜索该空间，利用限界函数避免移动到不可能产生解的子空间。</p><p>回溯算法的一个有趣的特性是在搜索执行的同时产生解空间。在搜索期间的任何时刻，仅保留从开始节点到当前 E-节点的路径。因此，回溯算法的空间需求为 O（从开始节点起最长路径的长度）</p><h1 id="排序算法整理"><a href="#排序算法整理" class="headerlink" title="排序算法整理"></a>排序算法整理</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><strong>选择排序</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[] , <span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span> ;i&lt;n ; i++)&#123;<span class="hljs-comment">//主遍历，遍历后的部分有序</span><br>        <span class="hljs-type">int</span> minIndex = i;<span class="hljs-comment">//每一轮便利中，最小元素下标</span><br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span> ; j&lt;n ; j++)&#123;<span class="hljs-comment">//子遍历</span><br>            <span class="hljs-keyword">if</span>(arr[j]&lt;arr[minIndex])<br>                minIndex = j;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(arr,i,minIndex);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="vesrion1"><a href="#vesrion1" class="headerlink" title="vesrion1"></a>vesrion1</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n;i++)&#123;<span class="hljs-comment">//主遍历，假设每次子遍历结束时，主指针之前元素均有序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i; j&gt;<span class="hljs-number">0</span>&amp;&amp; ;j--)&#123;<span class="hljs-comment">//子遍历，为子指针所指元素查找合适位置</span><br>            <span class="hljs-keyword">if</span>(arr[j]&lt;arr[j-<span class="hljs-number">1</span>])<span class="hljs-comment">//小于则交换</span><br>                swap(arr , j , j-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="version2"><a href="#version2" class="headerlink" title="version2"></a>version2</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort2</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i&lt;n;i++)&#123;<span class="hljs-comment">//主遍历，每次子遍历结束的时候，默认有序</span><br>        <span class="hljs-type">int</span> temp= arr[i];<span class="hljs-comment">//存放待排序元素</span><br>        <span class="hljs-type">int</span> j;<span class="hljs-comment">//查找上述元素所在位置</span><br>        <span class="hljs-keyword">for</span>(j=i; j&gt;<span class="hljs-number">0</span>&amp;&amp;arr[j-<span class="hljs-number">1</span>]&gt;temp;j--)<br>            arr[j]=arr[j-<span class="hljs-number">1</span>];<br>        arr[j] = temp;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>总时间=分解时间+解决问题时间+合并时间。分解时间就是把一个待排序序列分解成两序列，时间为一常数，时间复杂度 o(1).解决问题时间是两个递归式，把一个规模为 n 的问题分成两个规模分别为 n/2 的子问题，时间为 2T(n/2).合并时间复杂度为 o（n）。总时间 T(n)=2T(n/2)+o(n).这个递归式可以用递归树来解，其解是 o(nlogn).此外在最坏、最佳、平均情况下归并排序时间复杂度均为 o(nlogn).从合并过程中可以看出合并排序稳定。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[] , <span class="hljs-type">int</span> n)</span></span>&#123;<br>    __mergeSort(arr , <span class="hljs-number">0</span> , n<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-type">void</span> __mergeSort(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;= r)<br>        <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = (l+r)/<span class="hljs-number">2</span>;<br>    __mergeSort(arr,l,mid);<br>    __mergeSort(arr,mid,r);<br>    __merge(arr, l , mid , r)<br>&#125;<br><br><span class="hljs-type">void</span> __merge(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l , <span class="hljs-type">int</span> mid , <span class="hljs-type">int</span> r)&#123;<br>    <span class="hljs-type">int</span> aux[r-l+<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l ; i&lt; =r ;i++)<br>        aux[i-l] = arr[i];<br><br>    <span class="hljs-type">int</span> i = l,j = mid +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = l;k&lt;=r;k++)&#123;<br>        <span class="hljs-keyword">if</span>(i&gt;mid)&#123;<br>            arr[k] = aux[j-l];<br>            j++<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j&gt;r)&#123;<br>            arr[k] = aux[i-l];<br>            i++<br>        &#125;<br><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(aux[i-l] &lt;aux[j-l])&#123;<br>            arr[k]= aux[i-l];<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            arr[k] = aux[j-l];<br>            j++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="version1"><a href="#version1" class="headerlink" title="version1"></a>version1</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<span class="hljs-comment">//主体函数，向用户公开，可使用</span><br>    __quickSort(arr,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-type">void</span> __quickSort(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)&#123;<span class="hljs-comment">//内部封装函数，不向用户公开</span><br>    <span class="hljs-keyword">if</span>(r-l&lt;=<span class="hljs-number">15</span>)&#123;<br>        <span class="hljs-built_in">insertSort</span>(arr,l,r);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-type">int</span> p = __partition(arr,l,r);<span class="hljs-comment">//将最左端的元素找到对应位置，并传回对应位置</span><br>    __quickSort(arr,l,p<span class="hljs-number">-1</span>);<span class="hljs-comment">//将对应位置左端的全部元素排序</span><br>    __quickSort(arr,p+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//将对应位置右端的全部元素排序</span><br><br>&#125;<br><br><span class="hljs-type">int</span> __partition(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)&#123;<span class="hljs-comment">//排序过程</span><br>    <span class="hljs-built_in">swap</span>(arr[l] , arr[<span class="hljs-built_in">rand</span>()%(r-l+<span class="hljs-number">1</span>)+l]);<br>    <span class="hljs-type">int</span> v = arr[l];<span class="hljs-comment">//选取最左端元素，储存</span><br>    <span class="hljs-comment">//arr[l+1 ...j]&lt;v  ; arr[j+1 ... i]&gt;v</span><br>    <span class="hljs-type">int</span> j=l;<span class="hljs-comment">//j为最终所在位置</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l+<span class="hljs-number">1</span>; i&lt;=r ;i++)&#123;<span class="hljs-comment">//i为遍历指针</span><br>        <span class="hljs-keyword">if</span>(arr[i]&lt;v)&#123;<span class="hljs-comment">//当前遍历元素小于头元素时，将他放在j之前，大于则放在j之后</span><br>            <span class="hljs-built_in">swap</span>(arr[j+<span class="hljs-number">1</span>],arr[i]);<br>            j++；<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">swap</span>(arr[l],arr[j]);<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="version2-1"><a href="#version2-1" class="headerlink" title="version2"></a>version2</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-type">int</span> __partition2(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)&#123;<br>    <span class="hljs-built_in">swap</span>(arr[l] , arr[<span class="hljs-built_in">rand</span>()%(r-l+<span class="hljs-number">1</span>)+l]);<br>    <span class="hljs-type">int</span> v = arr[l];<span class="hljs-comment">//选取最左端元素，储存</span><br><br>    <span class="hljs-comment">//arr[l+1 ...j]&lt;v  ; arr[j+1 ... i]&gt;v</span><br>    <span class="hljs-type">int</span> i=l+<span class="hljs-number">1</span> , j=r;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;=r &amp;&amp; arr[i]&lt;v)i++;<br>        <span class="hljs-keyword">while</span>(j&gt;=l+<span class="hljs-number">1</span> &amp;&amp; arr[j]&gt;v)j--;<br>        <span class="hljs-keyword">if</span>(i&gt;j) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">swap</span>(arr[i],arr[j]);<br>        i++;<br>        j--;<br>    &#125;<br>    <span class="hljs-built_in">swap</span>(arr, l, j);<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda常用命令</title>
    <link href="/posts/c2bfdb75.html"/>
    <url>/posts/c2bfdb75.html</url>
    
    <content type="html"><![CDATA[<h1 id="Anaconda-常用命令-做个备忘"><a href="#Anaconda-常用命令-做个备忘" class="headerlink" title="Anaconda 常用命令[做个备忘]"></a>Anaconda 常用命令[做个备忘]</h1><ol><li><p>首先在所在系统中安装 Anaconda。可以打开命令行输入<code>conda -V</code>检验是否安装以及当前 conda 的版本。</p></li><li><p>conda 常用的命令:</p><ul><li><p><code>conda list</code> 查看安装了哪些包。</p></li><li><p><code>conda env list </code> 或 <code> conda info -e</code> 查看当前存在哪些虚拟环境</p></li><li><p><code>conda update conda</code> 检查更新当前 conda</p></li><li><p><code>conda --version</code> 查询 conda 版本</p></li><li><p><code>conda -h </code> 查询 conda 的命令使用</p></li></ul></li><li><p>创建 python 虚拟环境<br>使用 <code>conda create -n your_env_name python=X.X</code> （2.7、3.6 等)命令创建 python 版本为 X.X、名字为 your_env_name 的虚拟环境。your_env_name 文件可以在 Anaconda 安装目录 envs 文件下找到。<br>注意：默认的情况下只安装了一些必须的包，并不会像我们安装 anaconda 时自动安装很多常用的包。要实现上面的功能，则须在末尾加上‘anaconda’，完整命令是：<br><code>conda create -n your_env_name python=X.X anaconda</code></p></li><li><p>使用激活(或切换不同 python 版本)的虚拟环境</p><p>打开命令行输入<code>python --version</code>可以检查当前 python 的版本。</p><p>使用如下命令即可 激活你的虚拟环境(即将 python 的版本改变)。<br>Windows: <code>activate your_env_name </code>(虚拟环境名称)</p><p>这是再使用 <code> python --version</code> 可以检查当前 python 版本是否为想要的。</p></li><li><p>关闭虚拟环境(即从当前环境退出返回使用 PATH 环境中的默认 python 版本)<br>使用如下命令即可:<br>Windows:<code>conda deactivate</code></p></li><li><p>删除虚拟环境<br>使用命令<code> conda remove -n your_env_name(虚拟环境名称) --all</code> ， 即可删除。</p></li><li><p>删除环境中的某个包<br>使用命令 <code>conda remove --name your_env_name package_name</code> 即可。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ipad越狱</title>
    <link href="/posts/72ab7a71.html"/>
    <url>/posts/72ab7a71.html</url>
    
    <content type="html"><![CDATA[<h1 id="iPad2018-越狱"><a href="#iPad2018-越狱" class="headerlink" title="iPad2018 越狱"></a>iPad2018 越狱</h1><h2 id="无聊之举"><a href="#无聊之举" class="headerlink" title="无聊之举"></a>无聊之举</h2><p>晚上在实验室闲来无事给自己用了一年半的 iPad2018 越了下狱，想法也很简单，就是想换主题；）</p><p>参数：</p><table><thead><tr><th align="center"><strong>型号</strong></th><th align="center"><strong>iPad2018</strong></th></tr></thead><tbody><tr><td align="center"><strong>内存</strong></td><td align="center"><strong>128G</strong></td></tr><tr><td align="center"><strong>系统</strong></td><td align="center"><strong>13.5</strong></td></tr><tr><td align="center"><strong>颜色</strong></td><td align="center"><strong>金色</strong></td></tr></tbody></table><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>一台电脑 + 一根原装数据线</p><h3 id="安装爱思助手"><a href="#安装爱思助手" class="headerlink" title="安装爱思助手"></a>安装爱思助手</h3><p>打开年代久远的爱思助手，嗯我人傻了</p><p><img src="https://i.loli.net/2021/05/23/nNbE93tsiMy4DjO.jpg" alt="IMG_2922"></p><h3 id="安装相应的驱动程序"><a href="#安装相应的驱动程序" class="headerlink" title="安装相应的驱动程序"></a>安装相应的驱动程序</h3><h3 id="安装一键越狱（没错就是这么简单）"><a href="#安装一键越狱（没错就是这么简单）" class="headerlink" title="安装一键越狱（没错就是这么简单）"></a>安装一键越狱（没错就是这么简单）</h3><h3 id="一键越狱"><a href="#一键越狱" class="headerlink" title="一键越狱"></a>一键越狱</h3><h3 id="开始越狱"><a href="#开始越狱" class="headerlink" title="开始越狱"></a>开始越狱</h3><h2 id="我踩过的坑"><a href="#我踩过的坑" class="headerlink" title="我踩过的坑"></a>我踩过的坑</h2><p>一开始用的奥德赛 Odyssey（因为没用过，想尝尝鲜），而且奥德赛内置的是 sileo，在我看来 sileo 确实比 cydia 颜值高，奥德赛跟奇美拉 Chimera 一样都是一个开发者（Coolstar）开发的，又叫 Chimera13。尝试几次过后，确实进入了越狱系统，但是不太稳定，而且不能清除越狱。</p><p>所以我还是用回 Uncover 吧，只能说 un 永远的神，cy 永远的神，我永远爱 cydia!!!</p><h2 id="越狱成功"><a href="#越狱成功" class="headerlink" title="越狱成功"></a>越狱成功</h2><p>经过简单的几步，清除了之前奥德赛的越狱环境，再次越狱成功。</p><h2 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 以前用过的源">源(自用)<br>https://apt.bingner.com/<br>https://repo.midnightchips.me/<br>http://rpetri.ch/repo/<br>http://apt.modmyi.com/<br>http://cydia.zodttd.com/repo/cydia/<br>http://repo.feng.com/<br>http://ryleyangus.com/repo/<br>http://repo.applebetas.co/<br>https://buufjuiced.yourepo.com/<br>http://apt.cydia.love/<br>http://tigisoftware.com/cydia/<br>http://repo.packix.com/<br>http://repo.hackyouriphone.org/<br>https://repo.netskao.cn/<br>http://junesiphone.com/supersecret/<br>https://cydia.angelxwind.net/<br>https://opa334.github.io/<br>https://ibreak.yourepo.com/<br>http://skitty.xyz/repo/<br>http://apt.cydiaba.cn/<br>http://repo.bingner.com/<br>http://apt.thebigboss.org/repofiles/cydia/<br>https://getdelta.co/<br>http://cydia.hbang.ws/<br>http://apt.cydiabc.top/<br>https://repo.nepeta.me/<br>http://apt.ss03.cn/<br>https://creaturecoding.com/repo/<br>https://diatr.us/chicydia/<br>http://apt.cydiavip.com/<br>https://apt.abcydia.com/<br>https://repo.dynastic.co/<br>https://sparkdev.me/<br>https://repo.incendo.ws/<br>http://apt.wxhbts.com/<br>http://aptso.cn/<br>http://Poomsmart.github.io/repo/<br>http://apt.iphoneba.cn/<br>https://c1d3r.com/repo/<br>https://jakeashacks.ga/cydia/<br>http://decimation.github.io/<br>http://apt.Fcydia.com/<br>https://creaturesurvive.github.io/<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/23/dRTyItCVF3PaB2q.jpg" alt="IMG_2923"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>为了简洁我就装了下面几个必要的源</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>apt.<span class="hljs-number">25</span>mao.com/<br>http:<span class="hljs-regexp">//</span>apt.dddjb.cn/<br>http:<span class="hljs-regexp">//</span>apt.cydiabc.top/<br>https:<span class="hljs-regexp">//</span>creaturecoding.com<span class="hljs-regexp">/repo/</span><br>https:<span class="hljs-regexp">//g</span>etdelta.co/<br>http:<span class="hljs-regexp">//</span>cydia.hbang.ws/<br>https:<span class="hljs-regexp">//i</span><span class="hljs-keyword">break</span>.yourepo.com/<br>http:<span class="hljs-regexp">//</span>junesiphone.com<span class="hljs-regexp">/supersecret/</span><br>https:<span class="hljs-regexp">//</span>cydia.angelxwind.net/<br>https:<span class="hljs-regexp">//</span>repo.incendo.ws/<br>http:<span class="hljs-regexp">//</span>rpetri.ch<span class="hljs-regexp">/repo/</span><br>http:<span class="hljs-regexp">//</span>ryleyangus.com<span class="hljs-regexp">/repo/</span><br>http:<span class="hljs-regexp">//</span>tigisoftware.com<span class="hljs-regexp">/cydia/</span><br></code></pre></div></td></tr></table></figure><p>然后&gt;-&lt;就可以开心地去安装自己想要的插件啦~</p><p>简单安装 ithemer 以及主题 Marque 后：</p><p><img src="https://i.loli.net/2021/05/23/LYV6cgRzGUDTxqb.jpg" alt="IMG_2925"></p><p>锁屏这个是 Jellyfish</p><p><img src="https://i.loli.net/2021/05/23/qmKujRgHtP7c4No.jpg" alt="IMG_2928"></p><p>放下自己安装的一些插件：</p><p><img src="https://i.loli.net/2021/05/23/QNMHuhrUGDYLRea.jpg" alt="IMG_0439(20210523-215456)"></p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>越狱</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3.7.10-dlib</title>
    <link href="/posts/e3871fd1.html"/>
    <url>/posts/e3871fd1.html</url>
    
    <content type="html"><![CDATA[<h1 id="python3-7-10-下安装-dlib-库"><a href="#python3-7-10-下安装-dlib-库" class="headerlink" title="python3.7.10 下安装 dlib 库"></a>python3.7.10 下安装 dlib 库</h1><h2 id="dlib-简介"><a href="#dlib-简介" class="headerlink" title="dlib 简介"></a>dlib 简介</h2><p>Dlib 是一个 C++ 工具库，包含机器学习算法，图像处理，网络及一些工具类库。在工业界，学术界都得到广泛使用。</p><ul><li>官方网站：<a href="http://dlib.net/">http://dlib.net/</a></li><li>Github 项目：<a href="https://github.com/davisking/dlib">https://github.com/davisking/dlib</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> cmake<br>pip <span class="hljs-keyword">install</span> boost<br></code></pre></div></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>尝试数次后，终于找到正确的版本！！！</p><p><a href="https://blog.csdn.net/weixin_41453476/article/details/105854784?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf">(4 条消息) Python 3.7 两步安装 dlib(超简单！亲测有效)<em>lifour 丿一</em>一乚的博客-CSDN 博客</a></p><p>这个链接下有==</p><p>不用安装 vs2017</p><p>链接：<a href="https://pan.baidu.com/s/1VrDssoHfcTbAGGB6cRIwBQ">https://pan.baidu.com/s/1VrDssoHfcTbAGGB6cRIwBQ</a><br>提取码：76u8</p><p>下载好 whl 文件，然后进入文件目录，cmd 就好了</p><p>下载地址：<a href="https://pypi.org/simple/dlib/">https://pypi.org/simple/dlib/</a></p><p>选择适合你的版本，本人配置：</p><blockquote><p>Window 10 + Python 3.7.10</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install dlib-<span class="hljs-number">19</span>.<span class="hljs-number">17</span>.<span class="hljs-number">99</span>-cp37-cp37m-win_amd64.whl<br></code></pre></div></td></tr></table></figure><p>安装成功</p><p><img src="https://i.loli.net/2021/05/19/YPStd3rRzsjimpl.png" alt="image-20210519202514930"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>dlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Don&#39;t be evil</title>
    <link href="/posts/faf219b1.html"/>
    <url>/posts/faf219b1.html</url>
    
    <content type="html"><![CDATA[<h1 id="不作恶"><a href="#不作恶" class="headerlink" title="不作恶"></a>不作恶</h1><p>​ 对于商业公司来说，只要法律不禁止都是可以做的，绝大多数公司都是这样的企业文化，谷歌公司从 2000 年初创时就把<strong>不作恶</strong>（<strong>Don’t be evil</strong>）当作了公司文化，这也是谷歌公司在海内外圈粉的一个重要因素，也深深地影响了谷歌公司的员工，这句话甚至成为谷歌总部班车上 Wi-Fi 的密码。不过在 2015 年谷歌公司重组时，母公司 Alphabet 对这个座右铭做了调整，“不作恶”准则被“<strong>做正确的事</strong>”（<strong>do the right thing</strong>）取代。让我想起来三体里罗辑和史强的一段对话，对宇宙社会学进行了一番讨论，讲到了宇宙的公理和善恶。</p><p>宇宙文明的两条<strong>公理</strong>：</p><ul><li><p>生存是文明的第一需求</p></li><li><p>文明不断增长和扩张，但宇宙中的物质总量保持不变</p></li></ul><p>宇宙的两条<strong>准则</strong>：</p><ul><li>猜疑链（谁也不知道谁会先攻击谁）</li><li>技术爆炸</li></ul><p>文明之间的善意和恶意。善和恶在科学里是不严谨的，所以需要对它们的含义加以限制：善意就是指不主动攻击和消灭其他文明，恶意则相反。类比于科技公司的谷歌，是否也存在着相似的含义。</p><p>前几天还看到一个 up 主用代码可视化黑暗森林法则，贴一下链接：</p><p><a href="https://www.bilibili.com/video/BV11h411m7Fp?p=1&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1620233847&unique_k=HoaMxA">黑暗森林可视化，真的只有一个选择吗？【波西】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p>书中对黑暗森林有这样一段描述：</p><blockquote><p>黑暗森林理论对人类文明的影响是极其深刻的：那个篝火余烬旁的孩子，由外向乐观变得孤僻自闭了。</p></blockquote><p>代码链接：</p><p><a href="https://github.com/brackrat/darkforestsimulate">BrackRat/darkforestsimulate: 三体-黑暗森林模拟程序 (github.com)</a></p><p>还有个谷歌砍掉的项目的网站（有兴趣可以去了解一下）：</p><p><a href="https://killedbygoogle.com/">Google Graveyard - Killed by Google</a></p><p><img src="https://i.loli.net/2021/05/07/bwmc3ASZsfJQrM8.png" alt="image-20210507194217756"></p>]]></content>
    
    
    <categories>
      
      <category>sketch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
      <tag>三体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Powershell&amp;&amp;cmd</title>
    <link href="/posts/1810e320.html"/>
    <url>/posts/1810e320.html</url>
    
    <content type="html"><![CDATA[<h1 id="Powershell-和-cmd"><a href="#Powershell-和-cmd" class="headerlink" title="Powershell 和 cmd"></a>Powershell 和 cmd</h1><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><blockquote><p>PowerShell（包括 Windows PowerShell 和 PowerShell Core）是微软公司开发的任务自动化和配置管理框架，由.NET Framework 和.NET Core 是构建的命令行界面壳层相关脚本语言组成，最初仅仅是 Windows 组件，后于 2016 年 8 月 18 日开源并跨平台支持。PowerShell 中，管理任务通常由 cmdlets（发音为 command-lets）执行，这是执行特定操作的专用.NET 类。可以将 cmdlet 集合至脚本、可执行文件（一般是独立应用程序）中，或通过常规.NET 类（或 WMI / COM 对象）实例化。通过访问不同数据存储中的数据由 PowerShell 运行，如资源管理器或注册表。</p><p>——维基百科</p></blockquote><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><blockquote><p>Windows 命令提示符（cmd.exe）是 Windows NT 下的一个用于运行 Windows 控制台程序或某些 DOS 程序的壳层程序；或在 Windows CE 下只用于运行控制台程序的壳层程序。它被用于替代 Windows 9x 系统中所提供的 COMMAND.COM 和“MS-DOS 提示符”。命令提示符的最初版本由 Therese Stowell 开发。</p><p>命令提示符为用户提供了一个命令行界面，该功能通过 Win32 控制台实现。用户可通过命令行运行程序和批处理文件，从而进行系统管理等。此外，命令提示符还支持管道和重定向功能。</p><p>——维基百科</p></blockquote><h2 id="Powershell-有以下优势："><a href="#Powershell-有以下优势：" class="headerlink" title="Powershell 有以下优势："></a>Powershell 有以下优势：</h2><h3 id="1-可以调用-cmd-命令"><a href="#1-可以调用-cmd-命令" class="headerlink" title="1.可以调用 cmd 命令"></a>1.可以调用 cmd 命令</h3><p>不管是 C+，C++,C#写的 dll,exe,还是是 Java 需要写的可执行 Jar（需要 JRE 环境），Powershell 都可以都可以调用并执行其中的方法。</p><h3 id="2-可以连接数据库。"><a href="#2-可以连接数据库。" class="headerlink" title="2.可以连接数据库。"></a>2.可以连接数据库。</h3><p>可连接数据库意味着可以实现脚本参数的可配置性。</p><h3 id="3-面相对象"><a href="#3-面相对象" class="headerlink" title="3.面相对象"></a>3.面相对象</h3><p>就像 C#,Java，Powershell 是高级脚本语言，是面相对象的，Powershell 中的一切都是对象，即在好多情况下，你可以这样使用对象的属性或方法，a.b.c.d()</p><h3 id="4-脚本命令可发现特性以及强大的帮助系统"><a href="#4-脚本命令可发现特性以及强大的帮助系统" class="headerlink" title="4.脚本命令可发现特性以及强大的帮助系统"></a>4.脚本命令可发现特性以及强大的帮助系统</h3><p>PowerShell 为我们提供了 Get-Help 命令，使用 Get-Help 我们就可以查询 PowerShell 命令的作用。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>PowerShell 是跨平台的，cmd 是 Windows 专用的。</li><li>PowerShell 有面向对象的管道。</li><li>PowerShell 能够调用.NET 的很多功能。</li></ul><p>PowerShell 可以看作是 cmd 的升级版、补充版，但其背后的实现方式却有很大的不同，PowerShell 基于面向对象的，更为易用。</p><p>PowerShell 是运行在 Windows 操作系统上实现对系统以及应用程序进行管理自动化的命令行脚本环境，PowerShell 需要.NET 环境的支持。</p><p>PowerShell 从 Windows7 开始已经内置于 Windows 操作系统中。（打开运行窗口(Windows 徽标键+R) -&gt; PowerShell -&gt; 点击确定或者回车即可打开 PowerShell 窗口。）</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="powershell-的美化"><a href="#powershell-的美化" class="headerlink" title="powershell 的美化"></a>powershell 的美化</h3><p>下载 Windows Terminal UWP（可以更改主题）</p><p><img src="https://i.loli.net/2021/05/04/LKuaMQhtrgAFEzT.png" alt="image-20210504152232919"></p><h3 id="cmd-的美化"><a href="#cmd-的美化" class="headerlink" title="cmd 的美化"></a>cmd 的美化</h3><p>改字体，改透明度，改背景色。</p><p><img src="https://i.loli.net/2021/05/04/Y85DjMiLqhk72Ru.png" alt="image-20210504152736543"></p>]]></content>
    
    
    <categories>
      
      <category>sketch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Powershell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渐进式 Web 应用（PWA）</title>
    <link href="/posts/9b31053c.html"/>
    <url>/posts/9b31053c.html</url>
    
    <content type="html"><![CDATA[<h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><h2 id="什么是-PWA"><a href="#什么是-PWA" class="headerlink" title="什么是 PWA?"></a>什么是 PWA?</h2><blockquote><p>PWA（Progressive Web Apps，渐进式 Web 应用）运用现代的 Web API 以及传统的渐进式增强策略来创建跨平台 Web 应用程序。这些应用无处不在、功能丰富，使其具有与原生应用相同的用户体验优势。</p></blockquote><p>一张图解释：</p><p><img src="https://i.loli.net/2021/05/03/vVdPznAloJ8BfxH.png" alt="image-20210503200213577"></p><p>Progressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。PWA 指的是使用指定技术和标准模式来开发的 Web 应用，这同时赋予它们 Web 应用和原生应用的特性，其目的是通过各种 Web 技术实现与原生 App 相近的用户体验。<del>（有点类似于微信里的小程序）</del></p><p>纵观现有 Web 应用与原生应用的对比差距，如离线缓存、沉浸式体验等等，可以通过已经实现的 Web 技术去弥补这些差距，最终达到与原生应用相近的用户体验效果。</p><p>例如一方面，Web 应用更加易于发现：相比于安装应用，访问一个网站显然更加容易和迅速。你还可以通过链接来分享 Web 应用。不过国内支持 PWA 的网站少之又少，大部分都砍掉网页端功能去做客户端，目前我知道的支持 PWA 的网站好像只有 flomo，另外 iOS 端也是支持 PWA 的，如下图所示（个人感觉不追求响应的话还是挺好用的）还有饿了么也在做。很多知名案例<a href="https://www.pwastats.com/">https://www.pwastats.com/</a></p><blockquote><p>随着 iOS 11.3 的发布，iOS 正式开始支持 PWA，可以将它放在苹果手机主屏。</p></blockquote><p><img src="https://i.loli.net/2021/05/03/gL6fFZR5cXNCpEu.png" alt="flomo_PWA"><img src="https://i.loli.net/2021/05/03/7lWCPpN68LFHUoJ.png" alt="image-20210503194938443"></p><p>另一方面，原生应用与操作系统可以更加完美的整合，也因此为用户提供了无缝的用户体验。你可以通过安装应用使得它在离线的状态下也可以运行；相较于使用浏览器访问，用户也更喜欢通过点击主页上的图标来访问它们喜爱的应用。</p><p>具体细节<a href="https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps/Introduction">渐进式 Web 应用介绍 - 渐进式 Web 应用（PWA） | MDN (mozilla.org)</a></p><h2 id="PWA-的优势"><a href="#PWA-的优势" class="headerlink" title="PWA 的优势"></a>PWA 的优势</h2><p>PWA 是可被发现、易安装、可链接、独立于网络、渐进式、可重用、响应性和安全的。</p><h2 id="什么使应用成为-PWA？"><a href="#什么使应用成为-PWA？" class="headerlink" title="什么使应用成为 PWA？"></a>什么使应用成为 PWA？</h2><p>它代表了构建 Web 应用程序的新理念，涉及一些特定的模式，API 和其他功能。一眼是看不出来一个 Web App 是不是 PWA 的。如果应用程序满足某些要求，或者实现了一组特定的功能，例如离线工作、可安装、易于同步、可以发送推送通知等，我们就可以将其视为 PWA。</p><p>一个 PWA 应该具有以下特点：</p><ul><li><p>你只需要基于开放的 W3C 标准的 web 开发技术来开发一个 app，不需要多客户端开发。</p></li><li><p>用户可以在安装前就体验你的 app。</p></li><li><p>不需要通过 AppStore 下载 app。app 会自动升级不需要用户升级。</p></li><li><p>用户会受到‘安装’的提示，点击安装会增加一个图标到用户首屏。</p></li><li><p>被打开时，PWA 会展示一个有吸引力的闪屏。</p></li><li><p>chrome 提供了可选选项，可以使 PWA 得到全屏体验。</p></li><li><p>必要的文件会被本地缓存，因此会比标准的 web app 响应更快（也许也会比 native app 响应快）</p></li><li><p>安装及其轻量 – 或许会有几百 kb 的缓存数据。</p></li><li><p>网站的数据传输必须是 https 连接。</p></li><li><p>PWA 可以离线工作，并且在网络恢复时可以同步最新数据。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>sketch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>web</tag>
      
      <tag>PWA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX数学公式</title>
    <link href="/posts/8f6abaad.html"/>
    <url>/posts/8f6abaad.html</url>
    
    <content type="html"><![CDATA[<h1 id="LaTeX-数学公式"><a href="#LaTeX-数学公式" class="headerlink" title="LaTeX 数学公式"></a>LaTeX 数学公式</h1><h2 id="LATeX-基本练习"><a href="#LATeX-基本练习" class="headerlink" title="LATeX 基本练习"></a>LATeX 基本练习</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>公式一律使用另取一行，并且上下都空一行</p><p>行间插入 $x = a + b$<br>区间插入 $$x = a + b$$</p><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><p>可以看到 x 元素的上标通过 ^ 符号后接的内容体现，下表通过 _ 符号后接的内容体现，多于一位是要加 {} 包裹的。 笔者习惯先下标后上标的写法，和我的书写习惯一致：x_{balabala}^{bala}，不管你使用哪一种风格，最好自己注意统一，不要混用.</p><p>$$<br>x_{1}^{2}<br>$$</p><p>$$<br>x_{22}^{(n)}<br>$$</p><h3 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h3><p>读到这里你已经了解了函数的概念，那么这历久很简单了，语法就是 \sqrt[]{} 。[] 中代表是几次根式，{} 代表根号下的表达式</p><p>$$<br>\sqrt[2]{3}<br>$$</p><h3 id="求和积分"><a href="#求和积分" class="headerlink" title="求和积分"></a>求和积分</h3><p>这里很容易看出求和函数表达式 \sum*{起点}^{终点}表达式，积分函数表达式 \int*下限^上限 dx</p><p>$$<br>\sum_{0}^{1}sinx<br>$$</p><p>$$<br>\int_0^1sinxdx<br>$$</p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>紧贴 a\!b</p><p>$$<br>a!b<br>$$</p><p>没有空格 ab</p><p>$$<br>ab<br>$$</p><p>小空格 a,b</p><p>$$<br>a,b<br>$$</p><p>中等空格 a\ b</p><p>$$<br>a\ b<br>$$</p><p>quad 空格 a\quad b</p><p>$$<br>a\quad b<br>$$</p><p>两个 quad 空格 a\qquad b</p><p>$$<br>a\qquad b<br>$$</p><p>这个直接看上面的文字，介绍很清楚，<strong>主要指微调距离</strong>，使得公式更加漂亮。请比较下面的积分公式</p><p>$$<br>\int_a^bf(x)dx<br>$$</p><p>$$<br>\ \int_a^bf(x)dx<br>$$</p><h3 id="公式界定符"><a href="#公式界定符" class="headerlink" title="公式界定符"></a>公式界定符</h3><p>通过 \left 和 \right 后面跟界定符来对同时进行界定</p><p>$$<br>\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)<br>$$</p><p>$$<br>\left|\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right|<br>$$</p><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><p>\\\\用来换行，&amp;=用来对齐等号, \begin{align}``\end{align}用来写多行</p><p>$$<br>x,=,a+,b\\<br>y,=a_{1},+a_{2},+b<br>$$</p><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p>通常使用 <code>\frac &#123;分子&#125; &#123;分母&#125;</code> 来生成一个分数，分数可多层嵌套。如果分式较为复杂，亦可使用 <code>分子 \over 分母</code> 此时分数仅有一层。</p><p>$$<br>\frac{a-1}{b-1} \quad or \quad {a+1 \over b+1}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Numpy基本库</title>
    <link href="/posts/b796f5c5.html"/>
    <url>/posts/b796f5c5.html</url>
    
    <content type="html"><![CDATA[<h1 id="Numpy-基本库"><a href="#Numpy-基本库" class="headerlink" title="Numpy 基本库"></a>Numpy 基本库</h1><h2 id="创建矩阵（采用-ndarray-对象）"><a href="#创建矩阵（采用-ndarray-对象）" class="headerlink" title="创建矩阵（采用 ndarray 对象）"></a>创建矩阵（采用 ndarray 对象）</h2><p>对于 python 中的 numpy 模块，一般用其提供的 ndarray 对象。创建一个 ndarray 对象很简单只要将一个 list 作为参数即可。例如:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <span class="hljs-comment">#引入numpy库</span><br><br><span class="hljs-comment">#创建一维的narray对象</span><br>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><br><span class="hljs-comment">#创建二维的narray对象</span><br>a2 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<br><br><span class="hljs-comment">#创建多维对象以其类推</span><br></code></pre></div></td></tr></table></figure><h2 id="获取矩阵行数列数（二维情况）"><a href="#获取矩阵行数列数（二维情况）" class="headerlink" title="获取矩阵行数列数（二维情况）"></a>获取矩阵行数列数（二维情况）</h2><p>习惯了采用 matlab 进行数模的编程，要对矩阵进行遍历时，一般先获取矩阵的行数和列数。要获取 narray 对象的各维的长度，可以通过 narray 对象的 shape 属性，例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<br><br><span class="hljs-built_in">print</span>(a.shape) <span class="hljs-comment">#结果返回一个tuple元组 (2L, 5L)</span><br><span class="hljs-built_in">print</span>(a.shape[<span class="hljs-number">0</span>]) <span class="hljs-comment">#获得行数，返回 2</span><br><span class="hljs-built_in">print</span>(a.shape[<span class="hljs-number">1</span>]) <span class="hljs-comment">#获得列数，返回 5</span><br></code></pre></div></td></tr></table></figure><h2 id="矩阵的截取"><a href="#矩阵的截取" class="headerlink" title="矩阵的截取"></a>矩阵的截取</h2><h3 id="按行列截取"><a href="#按行列截取" class="headerlink" title="按行列截取"></a>按行列截取</h3><p>矩阵的截取与 list 相类似，都是可以通过[]（方括号）来截取。例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<br><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]) <span class="hljs-comment">#截取第一行,返回 [[1 2 3 4 5]]</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment">#截取第二行，第三、四、五列，返回 [8 9 10]</span><br><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>,:]) <span class="hljs-comment">#截取第二行,返回 [ 6  7  8  9 10]</span><br></code></pre></div></td></tr></table></figure><h3 id="按条件截取"><a href="#按条件截取" class="headerlink" title="按条件截取"></a>按条件截取</h3><p>按条件截取其实是在[]（方括号）中传入自身的布尔语句。例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<br>b = a[a&gt;<span class="hljs-number">6</span>] <span class="hljs-comment"># 截取矩阵a中大于6的元素，范围的是一维数组</span><br><span class="hljs-built_in">print</span>(b) <span class="hljs-comment"># 返回 [ 7  8  9 10]</span><br><br><span class="hljs-comment"># 其实布尔语句首先生成一个布尔矩阵，将布尔矩阵传入[]（方括号）实现截取</span><br><span class="hljs-built_in">print</span>(a&gt;<span class="hljs-number">6</span>)<br><span class="hljs-comment"># 返回</span><br>[[<span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span>]<br> [<span class="hljs-literal">False</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span>]]<br></code></pre></div></td></tr></table></figure><p>按条件截取应用较多的是对矩阵中满足一定条件的元素变成特定的值。<br>例如将矩阵中大于 6 的元素变成 0。例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment">#开始矩阵为</span><br>[[ <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>]<br> [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span>]]<br><br>a[a&gt;<span class="hljs-number">6</span>] = <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment">#大于6清零后矩阵为</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br> [<span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]]<br></code></pre></div></td></tr></table></figure><h2 id="矩阵的合并"><a href="#矩阵的合并" class="headerlink" title="矩阵的合并"></a>矩阵的合并</h2><p>矩阵的合并可以通过 numpy 中的 hstack 方法和 vstack 方法实现</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a1 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<br>a2 = np.array([[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]])<br><br><span class="hljs-comment">#!注意 参数传入时要以列表list或元组tuple的形式传入</span><br><span class="hljs-built_in">print</span>(np.hstack([a1,a2]))<br><span class="hljs-comment">#横向合并，返回结果如下</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br> [<span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]]<br><br><span class="hljs-built_in">print</span>(np.vstack((a1,a2)))<br><span class="hljs-comment">#纵向合并，返回结果如下</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span>]<br> [<span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br> [<span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br> [<span class="hljs-number">7</span> <span class="hljs-number">8</span>]]<br></code></pre></div></td></tr></table></figure><p>矩阵的合并也可以通过 concatenate 方法。</p><p><strong>np.concatenate( (a1,a2), axis=0 ) 等价于 np.vstack( (a1,a2) )</strong></p><p><strong>np.concatenate( (a1,a2), axis=1 ) 等价于 np.hstack( (a1,a2) )</strong></p><h2 id="通过函数创建矩阵"><a href="#通过函数创建矩阵" class="headerlink" title="通过函数创建矩阵"></a>通过函数创建矩阵</h2><p>numpy 模块中自带了一些创建 ndarray 对象的函数，可以很方便的创建常用的或有规律的矩阵。</p><h3 id="arange"><a href="#arange" class="headerlink" title="arange"></a>arange</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.arange(<span class="hljs-number">10</span>) <span class="hljs-comment"># 默认从0开始到10（不包括10），步长为1</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 返回 [0 1 2 3 4 5 6 7 8 9]</span><br><br>a1 = np.arange(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>) <span class="hljs-comment"># 从5开始到10（不包括10），步长为1</span><br><span class="hljs-built_in">print</span>(a1) <span class="hljs-comment"># 返回 [5 6 7 8 9]</span><br><br>a2 = np.arange(<span class="hljs-number">5</span>,<span class="hljs-number">20</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 从5开始到20（不包括20），步长为2</span><br><span class="hljs-built_in">print</span>(a2) <span class="hljs-comment"># 返回 [ 5  7  9 11 13 15 17 19]</span><br></code></pre></div></td></tr></table></figure><h3 id="linspace"><a href="#linspace" class="headerlink" title="linspace"></a>linspace</h3><p>linspace()和 matlab 的 linspace 很类似，用于创建指定数量等间隔的序列，实际生成一个等差数列。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">7</span>) <span class="hljs-comment"># 生成首位是0，末位是10，含7个数的等差数列</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></div></td></tr></table></figure><h3 id="logspace"><a href="#logspace" class="headerlink" title="logspace"></a>logspace</h3><p>linspace 用于生成等差数列，而 logspace 用于生成等比数列。<br>下面的例子用于生成首位是 100，末位是 102，含 5 个数的等比数列。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.logspace(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></div></td></tr></table></figure><h3 id="ones、zeros、eye、empty"><a href="#ones、zeros、eye、empty" class="headerlink" title="ones、zeros、eye、empty"></a>ones、zeros、eye、empty</h3><p>ones 创建全 1 矩阵<br>zeros 创建全 0 矩阵<br>eye 创建单位矩阵<br>empty 创建空矩阵（实际有值）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a_ones = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment"># 创建3*4的全1矩阵</span><br><span class="hljs-built_in">print</span>(a_ones)<br><span class="hljs-comment"># 结果</span><br>[[ <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>]<br> [ <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>]<br> [ <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">1.</span>]]<br><br>a_zeros = np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment"># 创建3*4的全0矩阵</span><br><span class="hljs-built_in">print</span>(a_zeros)<br><span class="hljs-comment"># 结果</span><br>[[ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]<br> [ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]<br> [ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]]<br><br>a_eye = np.eye(<span class="hljs-number">3</span>) <span class="hljs-comment"># 创建3阶单位矩阵</span><br><span class="hljs-built_in">print</span>(a_eye)<br><span class="hljs-comment"># 结果</span><br>[ <span class="hljs-number">1.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]<br> [ <span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">0.</span>]<br> [ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>]]<br><br>a_empty = np.empty((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)) <span class="hljs-comment"># 创建3*4的空矩阵</span><br><span class="hljs-built_in">print</span>(a_empty)<br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]<br> [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]<br> [<span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span> <span class="hljs-number">0.</span>]]<br></code></pre></div></td></tr></table></figure><h3 id="fromstring"><a href="#fromstring" class="headerlink" title="fromstring"></a>fromstring</h3><p>fromstring()方法可以将字符串转化成 ndarray 对象，需要将字符串数字化时这个方法比较有用，可以获得字符串的 ascii 码序列。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-string">&quot;abcdef&quot;</span><br>b = np.fromstring(a,dtype=np.int8) <span class="hljs-comment"># 因为一个字符为8为，所以指定dtype为np.int8</span><br><span class="hljs-built_in">print</span>(b) <span class="hljs-comment"># 返回 [ 97  98  99 100 101 102]</span><br></code></pre></div></td></tr></table></figure><h3 id="fromfunction"><a href="#fromfunction" class="headerlink" title="fromfunction"></a>fromfunction</h3><p>fromfunction()方法可以根据矩阵的行号列号生成矩阵的元素。<br>例如创建一个矩阵，矩阵中的每个元素都为行号和列号的和。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">i,j</span>):<br>    <span class="hljs-keyword">return</span> i+j<br><br>a = np.fromfunction(func,(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>))<br><span class="hljs-comment"># 第一个参数为指定函数，第二个参数为列表list或元组tuple,说明矩阵的大小</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># 返回</span><br>[[ <span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>  <span class="hljs-number">5.</span>]<br> [ <span class="hljs-number">1.</span>  <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>  <span class="hljs-number">5.</span>  <span class="hljs-number">6.</span>]<br> [ <span class="hljs-number">2.</span>  <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>  <span class="hljs-number">5.</span>  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span>]<br> [ <span class="hljs-number">3.</span>  <span class="hljs-number">4.</span>  <span class="hljs-number">5.</span>  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span>  <span class="hljs-number">8.</span>]<br> [ <span class="hljs-number">4.</span>  <span class="hljs-number">5.</span>  <span class="hljs-number">6.</span>  <span class="hljs-number">7.</span>  <span class="hljs-number">8.</span>  <span class="hljs-number">9.</span>]]<br><span class="hljs-comment">#注意这里行号的列号都是从0开始的</span><br></code></pre></div></td></tr></table></figure><h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><h3 id="常用矩阵运算符"><a href="#常用矩阵运算符" class="headerlink" title="常用矩阵运算符"></a>常用矩阵运算符</h3><p>numpy 中的 ndarray 对象重载了许多运算符，使用这些运算符可以完成矩阵间对应元素的运算。</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">矩阵对应元素相加</td></tr><tr><td align="center">-</td><td align="center">矩阵对应元素相减</td></tr><tr><td align="center">*</td><td align="center">矩阵对应元素相乘</td></tr><tr><td align="center">/</td><td align="center">矩阵对应元素相除，如果都是整数则取商</td></tr><tr><td align="center">%</td><td align="center">矩阵对应元素相除后取余数</td></tr><tr><td align="center">**</td><td align="center">矩阵每个元素都取 n 次方，如**2：每个元素都取平方</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a1 = np.array([[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]])<br>a2 = np.array([[<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]])<br><br><span class="hljs-built_in">print</span>(a1+a2) <span class="hljs-comment"># 相加</span><br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">10</span> <span class="hljs-number">10</span> <span class="hljs-number">10</span>]<br> [ <span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>]]<br><br><span class="hljs-built_in">print</span>(a1/a2) <span class="hljs-comment"># 整数相除取商</span><br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>]<br> [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>]]<br><br><span class="hljs-built_in">print</span>(a1%a2) <span class="hljs-comment"># 相除取余数</span><br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span>]<br> [<span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]]<br></code></pre></div></td></tr></table></figure><h3 id="常用矩阵函数"><a href="#常用矩阵函数" class="headerlink" title="常用矩阵函数"></a>常用矩阵函数</h3><p>同样地，numpy 中也定义了许多函数，使用这些函数可以将函数作用于矩阵中的每个元素。<br>_表格中默认导入了 numpy 模块_，即 <code>import numpy as np</code></p><p><em>a 为 ndarray 对象。</em></p><table><thead><tr><th align="center">矩阵函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">np.sin(a)</td><td align="center">对矩阵 a 中每个元素取正弦,sin(x)</td></tr><tr><td align="center">np.cos(a)</td><td align="center">对矩阵 a 中每个元素取余弦,cos(x)</td></tr><tr><td align="center">np.tan(a)</td><td align="center">对矩阵 a 中每个元素取正切,tan(x)</td></tr><tr><td align="center">np.arcsin(a)</td><td align="center">对矩阵 a 中每个元素取反正弦,arcsin(x)</td></tr><tr><td align="center">np.arccos(a)</td><td align="center">对矩阵 a 中每个元素取反余弦,arccos(x)</td></tr><tr><td align="center">np.arctan(a)</td><td align="center">对矩阵 a 中每个元素取反正切,arctan(x)</td></tr><tr><td align="center">np.exp(a)</td><td align="center">对矩阵 a 中每个元素取指数函数,ex</td></tr><tr><td align="center">np.sqrt(a)</td><td align="center">对矩阵 a 中每个元素开根号 √x</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(np.sin(a))<br><span class="hljs-comment"># 结果</span><br>[[ <span class="hljs-number">0.84147098</span>  <span class="hljs-number">0.90929743</span>  <span class="hljs-number">0.14112001</span>]<br> [-<span class="hljs-number">0.7568025</span>  -<span class="hljs-number">0.95892427</span> -<span class="hljs-number">0.2794155</span> ]]<br><br><span class="hljs-built_in">print</span>(np.arcsin(a))<br><span class="hljs-comment"># 结果</span><br>C:\Users\Administrator\Desktop\learn.py:<span class="hljs-number">6</span>: RuntimeWarning: invalid value encountered <span class="hljs-keyword">in</span> arcsin<br>  <span class="hljs-built_in">print</span>(np.arcsin(a))<br>[[ <span class="hljs-number">1.57079633</span>         nan         nan]<br> [        nan         nan         nan]]<br></code></pre></div></td></tr></table></figure><p>当矩阵中的元素不在定义域范围内，会产生 RuntimeWarning，结果为 nan(not a number)。</p><h3 id="矩阵乘法（点乘）"><a href="#矩阵乘法（点乘）" class="headerlink" title="矩阵乘法（点乘）"></a>矩阵乘法（点乘）</h3><p>矩阵乘法必须满足矩阵乘法的条件，即第一个矩阵的列数等于第二个矩阵的行数。<br>矩阵乘法的函数为 dot<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a1 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]) <span class="hljs-comment"># a1为2*3矩阵</span><br>a2 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]) <span class="hljs-comment"># a2为3*2矩阵</span><br><br><span class="hljs-built_in">print</span>(a1.shape[<span class="hljs-number">1</span>]==a2.shape[<span class="hljs-number">0</span>]) <span class="hljs-comment"># True, 满足矩阵乘法条件</span><br><span class="hljs-built_in">print</span>(a1.dot(a2))<br><span class="hljs-comment"># a1.dot(a2)相当于matlab中的a1*a2</span><br><span class="hljs-comment"># 而python中的a1*a2相当于matlab中的a1.*a2</span><br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">22</span> <span class="hljs-number">28</span>]<br> [<span class="hljs-number">49</span> <span class="hljs-number">64</span>]]<br></code></pre></div></td></tr></table></figure><h3 id="矩阵的转置-aT"><a href="#矩阵的转置-aT" class="headerlink" title="矩阵的转置 aT"></a>矩阵的转置 aT</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><br><span class="hljs-built_in">print</span>(a.transpose())<br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">4</span>]<br> [<span class="hljs-number">2</span> <span class="hljs-number">5</span>]<br> [<span class="hljs-number">3</span> <span class="hljs-number">6</span>]]<br></code></pre></div></td></tr></table></figure><p>矩阵的转置还有更简单的方法，就是 a.T</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(a.T)<br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">4</span>]<br> [<span class="hljs-number">2</span> <span class="hljs-number">5</span>]<br> [<span class="hljs-number">3</span> <span class="hljs-number">6</span>]]<br></code></pre></div></td></tr></table></figure><h3 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h3><p>求矩阵的逆需要先导入<code>numpy.linalg</code>，用 linalg 的 inv 函数来求逆。<br>矩阵求逆的条件是矩阵的行数和列数相同。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> numpy.linalg <span class="hljs-keyword">as</span> lg<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]])<br><br><span class="hljs-built_in">print</span>(lg.inv(a))<br><span class="hljs-comment"># 结果</span><br>[[ -<span class="hljs-number">4.50359963e+15</span>   <span class="hljs-number">9.00719925e+15</span>  -<span class="hljs-number">4.50359963e+15</span>]<br> [  <span class="hljs-number">9.00719925e+15</span>  -<span class="hljs-number">1.80143985e+16</span>   <span class="hljs-number">9.00719925e+15</span>]<br> [ -<span class="hljs-number">4.50359963e+15</span>   <span class="hljs-number">9.00719925e+15</span>  -<span class="hljs-number">4.50359963e+15</span>]]<br><br>a = np.eye(<span class="hljs-number">3</span>) <span class="hljs-comment"># 3阶单位矩阵</span><br><span class="hljs-built_in">print</span>(lg.inv(a)) <span class="hljs-comment"># 单位矩阵的逆为他本身</span><br><span class="hljs-comment"># 结果</span><br>[[ <span class="hljs-number">1.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>]<br> [ <span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>  <span class="hljs-number">0.</span>]<br> [ <span class="hljs-number">0.</span>  <span class="hljs-number">0.</span>  <span class="hljs-number">1.</span>]]<br></code></pre></div></td></tr></table></figure><h2 id="矩阵信息获取（如平均值）"><a href="#矩阵信息获取（如平均值）" class="headerlink" title="矩阵信息获取（如平均值）"></a>矩阵信息获取（如平均值）</h2><h3 id="最大最小值"><a href="#最大最小值" class="headerlink" title="最大最小值"></a>最大最小值</h3><p>获得矩阵中元素最大最小值的函数分别是<code>max</code>和<code>min</code>，可以获得整个矩阵、行或列的最大最小值。<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">max</span>()) <span class="hljs-comment">#获取整个矩阵的最大值 结果： 6</span><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">min</span>()) <span class="hljs-comment">#结果：1</span><br><br><span class="hljs-comment"># 可以指定关键字参数axis来获得行最大（小）值或列最大（小）值</span><br><span class="hljs-comment"># axis=0 行方向最大（小）值，即获得每列的最大（小）值</span><br><span class="hljs-comment"># axis=1 列方向最大（小）值，即获得每行的最大（小）值</span><br><span class="hljs-comment"># 例如</span><br><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>))<br><span class="hljs-comment"># 结果为 [4 5 6]</span><br><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 结果为 [3 6]</span><br><br><span class="hljs-comment"># 要想获得最大最小值元素所在的位置，可以通过argmax函数来获得</span><br><span class="hljs-built_in">print</span>(a.argmax(axis=<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 结果为 [2 2]</span><br></code></pre></div></td></tr></table></figure><h3 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h3><p>获得矩阵中元素的平均值可以通过函数<code>mean()</code>。同样地，可以获得整个矩阵、行或列的平均值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(a.mean()) <span class="hljs-comment">#结果为： 3.5</span><br><br><span class="hljs-comment"># 同样地，可以通过关键字axis参数指定沿哪个方向获取平均值</span><br><span class="hljs-built_in">print</span>(a.mean(axis=<span class="hljs-number">0</span>)) <span class="hljs-comment"># 结果 [ 2.5  3.5  4.5]</span><br><span class="hljs-built_in">print</span>(a.mean(axis=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 结果 [ 2.  5.]</span><br></code></pre></div></td></tr></table></figure><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>方差的函数为<code>var()</code>,方差函数<code>var()</code>相当于函数<code>mean(abs(x - x.mean())**2)</code>,其中 x 为矩阵。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(a.var()) <span class="hljs-comment"># 结果 2.91666666667</span><br><br><span class="hljs-built_in">print</span>(a.var(axis=<span class="hljs-number">0</span>)) <span class="hljs-comment"># 结果 [ 2.25  2.25  2.25]</span><br><span class="hljs-built_in">print</span>(a.var(axis=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 结果 [ 0.66666667  0.66666667]</span><br></code></pre></div></td></tr></table></figure><h3 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h3><p>标准差的函数为<code>std()</code>。<br><code>std()</code>相当于<code>sqrt(mean(abs(x - x.mean())**2))</code>，或相当于<code>sqrt(x.var())</code>。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(a.std()) <span class="hljs-comment"># 结果 1.70782512766</span><br><br><span class="hljs-built_in">print</span>(a.std(axis=<span class="hljs-number">0</span>)) <span class="hljs-comment"># 结果 [ 1.5  1.5  1.5]</span><br><span class="hljs-built_in">print</span>(a.std(axis=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 结果 [ 0.81649658  0.81649658]</span><br></code></pre></div></td></tr></table></figure><h3 id="中值"><a href="#中值" class="headerlink" title="中值"></a>中值</h3><p>中值指的是将序列按大小顺序排列后，排在中间的那个值，如果有偶数个数，则是排在中间两个数的平均值。</p><p>例如序列[5,2,6,4,2]，按大小顺序排成 [2,2,4,5,6]，排在中间的数是 4，所以这个序列的中值是 4。</p><p>又如序列[5,2,6,4,3,2]，按大小顺序排成 [2,2,3,4,5,6]，因为有偶数个数，排在中间两个数是 3、4，所以这个序列中值是 3.5。</p><p>中值的函数是 median()，调用方法为 numpy.median(x,[axis])，axis 可指定轴方向，默认 axis=None，对所有数去中值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>x = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><br><span class="hljs-built_in">print</span>(np.median(x))  <span class="hljs-comment"># 对所有数取中值</span><br><span class="hljs-comment"># 结果</span><br><span class="hljs-number">3.5</span><br><br><span class="hljs-built_in">print</span>(np.median(x,axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># 沿第一维方向取中值</span><br><span class="hljs-comment"># 结果</span><br>[ <span class="hljs-number">2.5</span>  <span class="hljs-number">3.5</span>  <span class="hljs-number">4.5</span>]<br><br><span class="hljs-built_in">print</span>(np.median(x,axis=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 沿第二维方向取中值</span><br><span class="hljs-comment"># 结果</span><br>[ <span class="hljs-number">2.</span>  <span class="hljs-number">5.</span>]<br></code></pre></div></td></tr></table></figure><h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><p>矩阵求和的函数是 sum()，可以对行，列，或整个矩阵求和</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">sum</span>())           <span class="hljs-comment"># 对整个矩阵求和</span><br><span class="hljs-comment"># 结果 21</span><br><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)) <span class="hljs-comment"># 对行方向求和</span><br><span class="hljs-comment"># 结果 [5 7 9]</span><br><br><span class="hljs-built_in">print</span>(a.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)) <span class="hljs-comment"># 对列方向求和</span><br><span class="hljs-comment"># 结果 [ 6 15]</span><br></code></pre></div></td></tr></table></figure><h3 id="累积和"><a href="#累积和" class="headerlink" title="累积和"></a>累积和</h3><p>某位置累积和指的是该位置之前(包括该位置)所有元素的和。</p><p>例如序列[1,2,3,4,5]，其累计和为[1,3,6,10,15]，即第一个元素为 1，第二个元素为 1+2=3，……，第五个元素为 1+2+3+4+5=15。</p><p>矩阵求累积和的函数是 cumsum()，可以对行，列，或整个矩阵求累积和。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><br><span class="hljs-built_in">print</span>(a.cumsum())            <span class="hljs-comment"># 对整个矩阵求累积和</span><br><span class="hljs-comment"># 结果 [ 1  3  6 10 15 21]</span><br><br><span class="hljs-built_in">print</span>(a.cumsum(axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># 对行方向求累积和</span><br><span class="hljs-comment"># 结果</span><br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br> [<span class="hljs-number">5</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span>]]<br><br><span class="hljs-built_in">print</span>(a.cumsum(axis=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 对列方向求累积和</span><br><span class="hljs-comment"># 结果</span><br>[[ <span class="hljs-number">1</span>  <span class="hljs-number">3</span>  <span class="hljs-number">6</span>]<br> [ <span class="hljs-number">4</span>  <span class="hljs-number">9</span> <span class="hljs-number">15</span>]]<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
